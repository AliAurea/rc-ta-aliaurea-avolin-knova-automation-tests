import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { CredentialsHelper } from '../../../components/misc-utils/credentials-helper';
import { AdminHomePageHelper } from '../../../page-objects/pages/admin-home-page/admin-home.helper';
import { AdminHomePage } from '../../../page-objects/pages/admin-home-page/admin-home.po';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { AdminLoginPage } from '../../../page-objects/pages/admin-login-page/admin-login.po';
import { CommunitiesManagerConstant } from '../../../page-objects/pages/manage-communities/communities-manager/communities-manager.constants';
import { CommunitiesManagerHelper } from '../../../page-objects/pages/manage-communities/communities-manager/communities-manager.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;
    const communityName = `${CommunitiesManagerConstant.labels.test}${PageHelper.getUniqueId()}`;
    const categoryName = `${CommunitiesManagerConstant.labels.test}${PageHelper.getUniqueId()}`;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
        await AdminLoginPageHelper.loginAsAdmin();
    });

    // Jira References - KNOV-1337
    it('Login to Knova Administrator portal - [22249445]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249445;
        const user = CredentialsHelper.admin;

        StepLogger.preCondition('Logout');
        await AdminLoginPageHelper.logout();

        // Step 1 has been covered in beforeAll
        StepLogger.stepId(1);
        StepLogger.step('Open web browser and navigate to the QA URL e.g. http://10.25.212.11:8080/administrator/adminindex.do');
        StepLogger.verification('The Knova Logon page should be displayed');

        StepLogger.stepId(2);
        StepLogger.step('Input the Username value in the username textbox e.g. admin');
        StepLogger.verification('The inputted value should display in the Username textbox');
        await AdminLoginPageHelper.enterAndVerifyUserName(user.username);

        StepLogger.stepId(3);
        StepLogger.step('Input the Password value in the "Password" textbox');
        StepLogger.verification('The inputted value should be masked');
        await AdminLoginPageHelper.enterAndVerifyPassword(user.password);

        StepLogger.stepId(4);
        StepLogger.step('Click on "Login" button');
        await AdminLoginPage.loginForm.login.clickButton();
        StepLogger.verification('The Administrator user should be logged in successfully');
        await AdminHomePage.hamburgerIcon.verifyDisplayedStatus();

        StepLogger.stepId(5);
        StepLogger.step('Verify the Landing page is displayed with the name of the Administrator at the top right corner');
        StepLogger.verification('The Name of the Administrator is displayed at the top right corner');
        await AdminHomePageHelper.verifyUserNameAtTheTopRightCorner(CredentialsHelper.admin.username);
    });

    // Jira References - KNOV-1338
    it('View the Community Manager Page - [22249529]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249529;

        StepLogger.stepId(1);
        StepLogger.step('Click on the menu icon on the top left corner to open the menu navigation on the left');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The Navigation Menu is displayed in left vertical corner');
        await AdminHomePageHelper.verifySidebarFieldsDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on "Manage Communities" from the Menu  list');
        await AdminHomePageHelper.clickManageCommunities();
        StepLogger.verification('A sub menu list is displayed to the right of the Vertical navigation bar');
        await AdminHomePageHelper.verifyManageCommunitiesMenu();

        StepLogger.stepId(3);
        StepLogger.step('Click on "Communities Manager"');
        await AdminHomePageHelper.clickManageCommunitiesSubMenu(AdminHomePage.manageCommunities.communitiesManager);
        StepLogger.verification('The Community Manager page is displayed with a list of Communities already created listed (if any)');
        await CommunitiesManagerHelper.verifyPageTitle();

        StepLogger.stepId(4);
        StepLogger.step('Verify the buttons present on the Community Manager page');
        StepLogger.verification(`The following buttons are displayed at the bottom of the page
            "Create SubCategory"
            "Create Community"
            "Create Private Community"`);
        await CommunitiesManagerHelper.verifyPageContent();
    });

    // Jira References - KNOV-1340
    it('Choose the Language of the Public Community to Edit - [22249714]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249714;

        StepLogger.stepId(1);
        StepLogger.step('Click on the menu icon on the top left corner to open the menu navigation on the left');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The Navigation Menu is displayed in left vertical corner');
        await AdminHomePageHelper.verifySidebarFieldsDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on "Manage Communities" from the Menu  list');
        await AdminHomePageHelper.clickManageCommunities();
        StepLogger.verification('A sub menu list is displayed to the right of the Vertical navigation bar');
        await AdminHomePageHelper.verifyManageCommunitiesMenu();

        StepLogger.stepId(3);
        StepLogger.step('Click on "Communities Manager"');
        await AdminHomePageHelper.clickManageCommunitiesSubMenu(AdminHomePage.manageCommunities.communitiesManager);
        StepLogger.verification('The Community Manager page is displayed with a list of Communities already created listed (if any)');
        await CommunitiesManagerHelper.verifyPageTitle();

        StepLogger.stepId(4);
        StepLogger.step('Click on the "Language" dropdown box on the top right corner of the page');
        await CommunitiesManagerHelper.clickLanguageDropdown();
        StepLogger.verification('A list of configured Language is displayed');
        await CommunitiesManagerHelper.verifyLanguages();

        StepLogger.stepId(5);
        StepLogger.step('Click on the desired language');
        await CommunitiesManagerHelper.selectLanguage(CommunitiesManagerConstant.languageDropdown.english);
        StepLogger.verification(`The Community Manager Page is displayed with the list of Communities
            name (if any) with their corresponding English name`);
        await CommunitiesManagerHelper.verifyCommunitiesList();
    });

    // Jira References - KNOV-1339
    it('Create a Public Community at the top level of the hierarchy - [22249569]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249569;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input the name of the Community in the "Name" text box');
        await CommunitiesManagerHelper.enterCommunityName(communityName);
        StepLogger.verification('The Name value is displayed');
        await CommunitiesManagerHelper.verifyCommunityName(communityName);

        StepLogger.stepId(3);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(4);
        StepLogger.step('Click on the "Moderator" button');
        await CommunitiesManagerHelper.clickSelectModerator();
        StepLogger.verification('The Moderator selection modal is opened');
        await CommunitiesManagerHelper.verifyModeratorDialog();

        StepLogger.stepId(5);
        StepLogger.step('Click on the checkbox of the desired Moderator(s) and click "Ok" button');
        const moderator = await CommunitiesManagerHelper.selectModeratorAndClickOk();
        StepLogger.verification('The Selected Moderators are displayed on the New Community creation pop up page');
        await CommunitiesManagerHelper.verifySelectedModerator(moderator);

        StepLogger.stepId(6);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('The New Community creation modal is closed and the Public Community is created successfully');
        await CommunitiesManagerHelper.verifyCreatedCommunity(communityName);

        StepLogger.postCondition('Delete community');
        await CommunitiesManagerHelper.deleteCommunity(communityName);
    });

    // Jira References - KNOV-1342
    it('Create a Community Category under the top hierarchy - [22249735]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249735;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Subcategory" at the button of the page');
        await CommunitiesManagerHelper.clickCreateSubcategory();
        StepLogger.verification('The Category creation modal pop up page is displayed');
        await CommunitiesManagerHelper.verifyCreateSubcategoryDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input the name value in the "New Sub Category within Communities:" textbox e.g "QAMTEST"');
        await CommunitiesManagerHelper.enterSubcategoryName(categoryName);
        StepLogger.verification('The Name value is displayed in the textbox');
        await CommunitiesManagerHelper.verifySubcategoryName(categoryName);

        StepLogger.stepId(3);
        StepLogger.step('Input the description in the "Description" textbox');
        await CommunitiesManagerHelper.enterSubcategoryDescription(categoryName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifySubcategoryDescription(categoryName);

        StepLogger.stepId(4);
        StepLogger.step('Click the "Submit" button');
        await CommunitiesManagerHelper.clickSubcategorySubmitButton();
        StepLogger.verification('The modal pop up is closed, the Community Manger"s page is displayed and the Category is created under the Top hierarchy');
        await CommunitiesManagerHelper.verifyCreatedSubcategory(categoryName);

        StepLogger.postCondition('Delete category');
        await CommunitiesManagerHelper.deleteCommunity(categoryName);
    });

    // Jira References - KNOV-1341
    it('Create a Public Community on a selected Community Category - [22249733]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22249733;

        StepLogger.preCondition('Create community subcategory');
        await CommunitiesManagerHelper.createSubcategory(categoryName);

        StepLogger.stepId(1);
        StepLogger.step('Click on the name of the Category to create a community under');
        await CommunitiesManagerHelper.selectSubcategory(categoryName);
        StepLogger.verification(`The Category is selected with name displayed at the bottom of the page and the following button are visible
            "Create Subcategory"
            "Create Community"
            "Create Private Community"
            "Rename"
            "Delete"`);
        await CommunitiesManagerHelper.verifySubcategorySelected(categoryName);

        StepLogger.stepId(2);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(3);
        StepLogger.step('Input the name of the Community in the "Name" text box');
        await CommunitiesManagerHelper.enterCommunityName(communityName);
        StepLogger.verification('The Name value is displayed');
        await CommunitiesManagerHelper.verifyCommunityName(communityName);

        StepLogger.stepId(4);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(5);
        StepLogger.step('Click on the "Moderator" button');
        await CommunitiesManagerHelper.clickSelectModerator();
        StepLogger.verification('The Moderator selection modal is opened');
        await CommunitiesManagerHelper.verifyModeratorDialog();

        StepLogger.stepId(6);
        StepLogger.step('Click on the checkbox of the desired Moderator(s) and click "Ok" button');
        const moderator = await CommunitiesManagerHelper.selectModeratorAndClickOk();
        StepLogger.verification('The Selected Moderators are displayed on the New Community creation pop up page');
        await CommunitiesManagerHelper.verifySelectedModerator(moderator);

        StepLogger.stepId(7);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('The New Community creation modal is closed and the Public Community is created successfully');
        await CommunitiesManagerHelper.verifyCreatedCommunity(communityName);

        StepLogger.postCondition('Delete category and community');
        await CommunitiesManagerHelper.deleteCategoryAndCommunity(categoryName, communityName);
    });

    // Jira References - KNOV-1343
    it('Create a Public Community with a customized Template Page - [22250083]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22250083;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input the name of the Community in the "Name" text box');
        await CommunitiesManagerHelper.enterCommunityName(communityName);
        StepLogger.verification('The Name value is displayed');
        await CommunitiesManagerHelper.verifyCommunityName(communityName);

        StepLogger.stepId(3);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(4);
        StepLogger.step('Click on the "Moderator" button');
        await CommunitiesManagerHelper.clickSelectModerator();
        StepLogger.verification('The Moderator selection modal is opened');
        await CommunitiesManagerHelper.verifyModeratorDialog();

        StepLogger.stepId(5);
        StepLogger.step('Click on the checkbox of the desired Moderator(s) and click "Ok" button');
        const moderator = await CommunitiesManagerHelper.selectModeratorAndClickOk();
        StepLogger.verification('The Selected Moderators are displayed on the New Community creation pop up page');
        await CommunitiesManagerHelper.verifySelectedModerator(moderator);

        StepLogger.stepId(6);
        StepLogger.step(`Input the file location and filename of the customized user interface template relative to the Knova Installation folder
            in the Template Page textbox e.g ..\Software\selfservice`);
        await CommunitiesManagerHelper.enterInputTemplate(communityName);
        StepLogger.verification('The Inputted file location is displayed in the Template Page text box');
        await CommunitiesManagerHelper.verifyInputTemplate(communityName);

        StepLogger.stepId(7);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('The New Community creation modal is closed and the Public Community is created successfully');
        await CommunitiesManagerHelper.verifyCreatedCommunity(communityName);

        StepLogger.postCondition('Delete community');
        await CommunitiesManagerHelper.deleteCommunity(communityName);
    });

    // Jira References - KNOV-1344
    it('Create a Public Community with Managed Collaboration - [22250085]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22250085;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input the name of the Community in the "Name" text box');
        await CommunitiesManagerHelper.enterCommunityName(communityName);
        StepLogger.verification('The Name value is displayed');
        await CommunitiesManagerHelper.verifyCommunityName(communityName);

        StepLogger.stepId(3);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(4);
        StepLogger.step('Click on the "Moderator" button');
        await CommunitiesManagerHelper.clickSelectModerator();
        StepLogger.verification('The Moderator selection modal is opened');
        await CommunitiesManagerHelper.verifyModeratorDialog();

        StepLogger.stepId(5);
        StepLogger.step('Click on the checkbox of the desired Moderator(s) and click "Ok" button');
        const moderator = await CommunitiesManagerHelper.selectModeratorAndClickOk();
        StepLogger.verification('The Selected Moderators are displayed on the New Community creation pop up page');
        await CommunitiesManagerHelper.verifySelectedModerator(moderator);

        StepLogger.stepId(6);
        StepLogger.step('Click on the Checkbox with value "Managed Collaboration Community" under the Template Page text box');
        await CommunitiesManagerHelper.clickManagedCollaboration();
        StepLogger.verification('The checkbox is ticked');
        await CommunitiesManagerHelper.verifyManagedCollaboration();

        StepLogger.stepId(7);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('The New Community creation modal is closed and the Public Community is created successfully');
        await CommunitiesManagerHelper.verifyCreatedCommunity(communityName);

        StepLogger.postCondition('Delete community');
        await CommunitiesManagerHelper.deleteCommunity(communityName);
    });

    // Jira References - KNOV-1345
    it('Create a Public Community with a blank fields - [22250086]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22250086;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Click the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('A pop up alert is displayed with a message "Community name required"');
        await CommunitiesManagerHelper.verifyCommunityNameRequired();

        StepLogger.stepId(3);
        StepLogger.step('Click on the "OK" button');
        await CommunitiesManagerHelper.clickOkButton();
        StepLogger.verification('The Pop up alert page is closed and the Community Creation modal is displayed');
        await CommunitiesManagerHelper.verifyWindowClosed();
    });

    // Jira References - KNOV-1346
    it('Create a Public Community without providing a value for Name - [22250087]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22250087;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(3);
        StepLogger.step('Click on the "Moderator" button');
        await CommunitiesManagerHelper.clickSelectModerator();
        StepLogger.verification('The Moderator selection modal is opened');
        await CommunitiesManagerHelper.verifyModeratorDialog();

        StepLogger.stepId(4);
        StepLogger.step('Click on the checkbox of the desired Moderator(s) and click "Ok" button');
        const moderator = await CommunitiesManagerHelper.selectModeratorAndClickOk();
        StepLogger.verification('The Selected Moderators are displayed on the New Community creation pop up page');
        await CommunitiesManagerHelper.verifySelectedModerator(moderator);

        StepLogger.stepId(5);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('An alert page is displayed with a message "Community Name Required"');
        await CommunitiesManagerHelper.verifyCommunityNameRequired();

        StepLogger.stepId(6);
        StepLogger.step('Click the "OK" on the Alert pop up');
        await CommunitiesManagerHelper.clickOkButton();
        StepLogger.verification('The Community Creation modal is displayed');
        await CommunitiesManagerHelper.verifyWindowClosed();
    });

    // Jira References - KNOV-1356
    it('Create a Public Community without selecting a Moderator - [22250203]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 08:13:49 GMT
        StepLogger.caseId = 22250203;

        StepLogger.preCondition('Navigate to Communities Manager');
        await CommunitiesManagerHelper.navigateToCommunitiesManager(true);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Create Community" button at the bottom of the page');
        await CommunitiesManagerHelper.clickCreateCommunity();
        StepLogger.verification('The New Community creation Pop up page is displayed');
        await CommunitiesManagerHelper.verifyNewCommunityDialog(true);

        StepLogger.stepId(2);
        StepLogger.step('Input a value for the Community name in the "Name" textbox');
        await CommunitiesManagerHelper.enterCommunityName(communityName);
        StepLogger.verification('The Name value is displayed');
        await CommunitiesManagerHelper.verifyCommunityName(communityName);

        StepLogger.stepId(3);
        StepLogger.step('Input a value for description in the "Description" textarea');
        await CommunitiesManagerHelper.enterCommunityDescription(communityName);
        StepLogger.verification('The inputted value is displayed');
        await CommunitiesManagerHelper.verifyCommunityDescription(communityName);

        StepLogger.stepId(4);
        StepLogger.step('Click on the "Submit" button');
        await CommunitiesManagerHelper.clickCommunitySubmitButton();
        StepLogger.verification('An alert page is displayed with a message "Please select the Moderator"');
        await CommunitiesManagerHelper.verifySelectModeratorWindow();

        StepLogger.stepId(5);
        StepLogger.step('Click the "OK" on the Alert pop up');
        await CommunitiesManagerHelper.clickOkButton();
        StepLogger.verification('The Community Creation modal is displayed');
        await CommunitiesManagerHelper.verifyWindowClosed();

        StepLogger.postCondition('Logout');
        await AdminLoginPageHelper.logout(true);
    });
});
