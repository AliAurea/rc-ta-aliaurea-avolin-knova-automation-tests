import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { AdminLoginPageHelper } from '../../../../page-objects/pages/admin-login-page/admin-login.helper';
import { SuccessConfigurationManagerConstant } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.constants';
import { SuccessConfigurationManagerHelper } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.helper';
import { SuccessConfigurationManagerPage } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.po';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    it('To configure "No clicked for "Did this help?" prompt" attribute. - [22345381]', async () => {
        // Auto generated by aurea-automation - util on Thu, 07 Mar 2019 11:19:40 GMT

        StepLogger.caseId = 22345381;
        const element = SuccessConfigurationManagerPage.resolutionFlow.noDidThisHelp;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "No clicked for "Did this help?" prompt" attribute drop down in "Resolution Flow" section.');
        await SuccessConfigurationManagerHelper.clickOnNoDidThisHelp();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyResolutionFlowDropDownOptions();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the No clicked for "Did this help?" prompt field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Yes clicked for "Did this help?" prompt" attribute. - [22345383]', async () => {
        // Auto generated by aurea-automation - util on Thu, 07 Mar 2019 11:34:14 GMT

        StepLogger.caseId = 22345383;
        const element = SuccessConfigurationManagerPage.resolutionFlow.yesDidThisHelp;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Yes clicked for "Did this help?" prompt" attribute drop down in "Resolution Flow" section.');
        await SuccessConfigurationManagerHelper.clickOnYesDidThisHelp();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyResolutionFlowDropDownOptions();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Yes clicked for "Did this help?" prompt field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "User Returned to Existing WebCase" attribute. - [22345386]', async () => {
        // Auto generated by aurea-automation - util on Thu, 07 Mar 2019 11:38:05 GMT

        StepLogger.caseId = 22345386;
        const element = SuccessConfigurationManagerPage.resolutionFlow.returnedToExistingWebCase;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "User Returned to Existing WebCase" attribute drop down in "Resolution flow" section.');
        await SuccessConfigurationManagerHelper.clickOnUserReturnedToExistingWebcase();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyResolutionFlowDropDownOptions();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the User Returned to Existing WebCase field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Unknown Outcome" attribute. - [22345387]', async () => {
        // Auto generated by aurea-automation - util on Thu, 07 Mar 2019 11:54:30 GMT

        StepLogger.caseId = 22345387;
        const element = SuccessConfigurationManagerPage.resolutionFlow.unKnownOutcome;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Unknown Outcome" attribute drop down in "Resolution flow" section.');
        await SuccessConfigurationManagerHelper.clickOnUnknownOutcome();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyResolutionFlowDropDownOptions();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Unknown Outcome field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "No Documents returned" attribute. - [22346573]', async () => {
        // Auto generated by aurea-automation - util on Thu, 07 Mar 2019 12:05:56 GMT

        StepLogger.caseId = 22346573;
        const element = SuccessConfigurationManagerPage.searchSection.returnedNoDocs;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "No Documents returned" attribute drop down in "Search" section.');
        await SuccessConfigurationManagerHelper.clickOnNoDocumentsReturned();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifySearchSectionDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the No Documents returned field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });
});
