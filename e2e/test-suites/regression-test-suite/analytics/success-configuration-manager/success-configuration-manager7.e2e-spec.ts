import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { AdminLoginPageHelper } from '../../../../page-objects/pages/admin-login-page/admin-login.helper';
import { SuccessConfigurationManagerConstant } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.constants';
import { SuccessConfigurationManagerHelper } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.helper';
import { SuccessConfigurationManagerPage } from '../../../../page-objects/pages/administer-system/analytics/success-configuration-manager/success-configuration-manager.po';
import { KnowledgeCentralHomePageHelper } from '../../../../page-objects/pages/knowledge-central-home-page/knowledge-central-home.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    it('To configure ""Problem Solved" Clicked on Post Preview" attribute. - [22362981]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 09:47:55 GMT

        StepLogger.caseId = 22362981;
        const element = SuccessConfigurationManagerPage.communities.problemSolved;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the ""Problem Solved" Clicked on Post Preview" attribute drop down in "Communities" section.');
        await SuccessConfigurationManagerHelper.clickOnProblemSolved();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyWorkbenchDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the "Problem Solved" Clicked on Post Preview field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Replied to Thread" attribute. - [22362982]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 10:04:34 GMT

        StepLogger.caseId = 22362982;
        const element = SuccessConfigurationManagerPage.communities.repliedToThread;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Replied to Thread" attribute drop down in "Communities" section.');
        await SuccessConfigurationManagerHelper.clickOnRepliedToThread();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyWorkbenchDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Replied to Thread field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Unknown Outcome" attribute. - [22362983]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 10:12:26 GMT

        StepLogger.caseId = 22362983;
        const element = SuccessConfigurationManagerPage.communities.unknownOutcome;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Unknown Outcome" attribute drop down in "Communities" section.');
        await SuccessConfigurationManagerHelper.clickOnForumUnknownOutcome();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyWorkbenchDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Unknown Outcome field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Document viewed" attribute. - [22363019]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 10:57:19 GMT

        StepLogger.caseId = 22363019;
        const element = SuccessConfigurationManagerPage.homeBrowse.documentViewed;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Document viewed" attribute drop down in "Home/Browse" section.');
        await SuccessConfigurationManagerHelper.clickOnDocumentViewed();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyWorkbenchDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Document viewed field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To configure "Recommendation accessed" attribute. - [22363025]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 11:08:42 GMT

        StepLogger.caseId = 22363025;
        const element = SuccessConfigurationManagerPage.homeBrowse.recommendationAccessed;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Recommendation accessed" attribute drop down in "Home/Browse" section.');
        await SuccessConfigurationManagerHelper.clickOnRecommendation();
        StepLogger.verification(`Following options should be displayed.
        -Neg
        -N/A
        -Pos`);
        await SuccessConfigurationManagerHelper.verifyWorkbenchDropDownProperties();

        StepLogger.stepId(2);
        StepLogger.step('Select one of the options from the drop down.');
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The selection option should be displayed in the Recommendation accessed field.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(3);
        StepLogger.step('Click on Save at the bottom of the page.');
        await SuccessConfigurationManagerHelper.clickOnSaveButton();
        StepLogger.verification('The option should be saved.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);
    });

    it('To verify the Cancel button. - [22363039]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 11:22:47 GMT

        StepLogger.caseId = 22363039;
        const element = SuccessConfigurationManagerPage.homeBrowse.recommendationAccessed;
        const value = SuccessConfigurationManagerConstant.generalSection.positiveValue;

        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Make some changes in some of the attributes using the drop downs.');
        await SuccessConfigurationManagerHelper.clickOnRecommendation();
        const text = await SuccessConfigurationManagerHelper.selectOptionFromDropDown(element, value);
        StepLogger.verification('The changes should be displayed in the fields.');
        await SuccessConfigurationManagerHelper.verifySelectedOptionFromDropDown(element, text);

        StepLogger.stepId(2);
        StepLogger.step('Scroll down and click on cancel button.');
        await SuccessConfigurationManagerHelper.clickOnCancelButton();
        StepLogger.verification('Home screen of Knova should be displayed.');
        await PageHelper.refreshPage();
        await KnowledgeCentralHomePageHelper.verifyHeaderBannerDisplayed();
    });

    it('To verify the help (question mark) icon. - [22363055]', async () => {
        // Auto generated by aurea-automation - util on Mon, 11 Mar 2019 12:11:58 GMT

        StepLogger.caseId = 22363055;
        StepLogger.preCondition('Execute test case C22345210 to access "Success Configuration Manager" section.');
        await SuccessConfigurationManagerHelper.navigateToSuccessConfManager();

        StepLogger.stepId(1);
        StepLogger.step('Go to the top right of the page.');
        StepLogger.verification('Help (question mark) icon should be available.');
        await SuccessConfigurationManagerHelper.verifyHelpIconDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Hover the mouse on the Help icon.');
        await SuccessConfigurationManagerHelper.hoverOverHelpIcon();
        StepLogger.verification('If should display the full forms of the options available in the attribute drop downs.');
        await SuccessConfigurationManagerHelper.verifyFullFormsOfOptions();
    });
});
