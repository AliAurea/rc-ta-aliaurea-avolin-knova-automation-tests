import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { Constants } from '../../../../components/misc-utils/constants';
import { RandomHelper } from '../../../../components/misc-utils/random-helper';
import {
    SelfServiceEditProfileConstant
} from '../../../../page-objects/pages/self-service-profile-editor/self-service-edit-profile.contant';
import {
    SelfServiceEditProfilePageHelper
} from '../../../../page-objects/pages/self-service-profile-editor/self-service-edit-profile.helper';
import { SelfServiceHomePageHelper } from '../../../../page-objects/pages/self-service/self-service-home-page.helper';
import { SelfServiceLoginPageHelper } from '../../../../page-objects/pages/self-service/self-service-login.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: SelfServiceLoginPageHelper;
    const editProfilePage = SelfServiceEditProfilePageHelper;
    const editProfileConstant = SelfServiceEditProfileConstant;

    beforeAll(async () => {
        loginPageHelper = SelfServiceLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await SelfServiceHomePageHelper.clickOnLogOutIfPresent();
        await loginPageHelper.goTo();
        await SelfServiceLoginPageHelper.loginAsAdmin();
    });

    // Jira References - KNOV-2376
    it('To edit user data. - [22949005]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22949005;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyEditProfilePageDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Edit any of the fields like password, first name, phone number etc.Click on Save.');
        const initial = PageHelper.getUniqueId();
        await editProfilePage.typeInitial(initial);
        await editProfilePage.clickOnSaveButton();
        StepLogger.verification('Information should be saved and the confirmation message should be displayed at the top.');
        await editProfilePage.verifyInitial(initial);
    });

    // Jira References - KNOV-2382
    it('To verify the error message when invalid email id is provided. - [22955832]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22955832;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Provide an invalid email id in the Email Address field. Click on Save');
        const invalidEmail = PageHelper.getUniqueId();
        await editProfilePage.typeEmailAddress(invalidEmail);
        await editProfilePage.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await editProfilePage.verifyMessagePopupDisplayed(editProfileConstant.messages.pleaseEnterValidEmailAddress);
    });

    // Jira References - KNOV-2383
    it('To verify the Cancel button. - [22957860]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22957860;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Edit some of the fields. Click on Cancel.');
        const initial = PageHelper.getUniqueId();
        await editProfilePage.typeInitial(initial);
        await editProfilePage.clickOnCancelButton();
        StepLogger.verification('A confirmation window should be displayed.');
        await editProfilePage.verifyConfirmationMessageDisplayedAndClickYes();

        // Step 4 is covered in step 3
        StepLogger.stepId(4);
        StepLogger.step('Click on Yes.');
        StepLogger.verification('The data should be saved successfully.');
        await editProfilePage.verifyInitial(initial);
    });

    // Jira References - KNOV-2384
    it('To verify the No button in the confirmation window. - [22957893]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22957893;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();
        const originalSavedInitial = await editProfilePage.getInitialFieldValue();

        StepLogger.stepId(3);
        StepLogger.step('Edit some of the fields. Click on Cancel.');
        const initial = PageHelper.getUniqueId();
        await editProfilePage.typeInitial(initial);
        await editProfilePage.clickOnCancelButton();
        StepLogger.verification('A confirmation window should be displayed.');
        await editProfilePage.verifyConfirmationMessageDisplayedAndClickNo();

        // Step 4 is covered in step 3
        StepLogger.stepId(4);
        StepLogger.step('Click on No.');
        StepLogger.verification('The data should not be saved and the Knova home page should be displayed');
        await editProfilePage.navigateToProfileData();
        await editProfilePage.verifyInitial(originalSavedInitial);
    });

    // Jira References - KNOV-2378
    it('To verify the error message when passwords do not match. - [22949059]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22949059;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Provide value in password and confirm password fields which do not match. Click on save.');
        await editProfilePage.typePasswordAndConfirmationPassword(
            PageHelper.getUniqueId(), PageHelper.getUniqueId());
        await editProfilePage.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await editProfilePage.verifyMessagePopupDisplayed(editProfileConstant.messages.passwordDontMatch);
    });

    // Jira References - KNOV-2381
    it('To verify the error message when mandatory fields are left blank. - [22955689]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22955689;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step(`Leave some of the mandatory fields empty.
        Click on Save.`);
        const emptyPass = Constants.EMPTY_STRING;
        await editProfilePage.typePassword(emptyPass);
        await editProfilePage.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await editProfilePage.verifyMessagePopupDisplayed(editProfileConstant.messages.blankMandatoryField);
    });

    // Jira References - KNOV-2377
    it('To verify the error message when invalid password is provided. - [22949034]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22949034;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('In the password field, provide a password which is less than 6 characters or more than 64 characters.');
        const shortPass = RandomHelper.getRandomString(Constants.number.three);
        await editProfilePage.typePassword(shortPass);
        await editProfilePage.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await editProfilePage.verifyMessagePopupDisplayed(editProfileConstant.messages.invalidPassword);
    });

    // Jira References - KNOV-2385
    it('To verify the Cancel button in the confirmation window. - [22958061]', async () => {
        // Auto generated by aurea-automation - util on Fri, 26 Apr 2019 16:02:45 GMT

        StepLogger.caseId = 22958061;
        StepLogger.stepId(1);
        StepLogger.step('Click on Edit profile link at the top right.');
        await SelfServiceHomePageHelper.clickOnEditProfile();
        StepLogger.verification('Preferences tab should be opened.');
        await editProfilePage.verifyTabHighlighted(editProfileConstant.names.preferences);

        StepLogger.stepId(2);
        StepLogger.step('Click on Profile data tab.');
        await editProfilePage.clickOnTab(editProfileConstant.names.profileData);
        StepLogger.verification('Profile data tab details should be displayed.');
        await editProfilePage.verifyProfileDataDetailsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Edit some of the fields. Click on Cancel.');
        await editProfilePage.typeInitial(PageHelper.getUniqueId());
        await editProfilePage.clickOnCancelButton();
        StepLogger.verification('A confirmation window should be displayed.');
        await editProfilePage.verifyConfirmationMessageDisplayedAndClickCancel();

        // Step 4 is covered in step 3
        StepLogger.stepId(4);
        StepLogger.step('Click on Cancel.');
        StepLogger.verification('The confirmation window should be closed.');
        await editProfilePage.verifyErrorMessageIsClosed(Constants.number.one);
    });
});
