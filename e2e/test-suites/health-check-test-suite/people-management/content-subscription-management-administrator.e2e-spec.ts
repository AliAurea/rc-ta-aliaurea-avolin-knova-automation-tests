import { StepLogger } from '../../../../core/logger/step-logger';
import { DropDownHelper } from '../../../components/html/dropdown-helper';
import { PageHelper } from '../../../components/html/page-helper';
import { RandomHelper } from '../../../components/misc-utils/random-helper';
import { AdminHomePageHelper } from '../../../page-objects/pages/admin-home-page/admin-home.helper';
import { AdminHomePage } from '../../../page-objects/pages/admin-home-page/admin-home.po';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { ManagePeople1Helper } from '../../../page-objects/pages/manage-people/manage-people1.helper';
import { ProfileEditorConstant } from '../../../page-objects/pages/profile-editor/profile-editor.constant';
import { ProfileEditorHelper } from '../../../page-objects/pages/profile-editor/profile-editor.helper';
import { ProfileEditorPage } from '../../../page-objects/pages/profile-editor/profile-editor.po';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.healthCheckSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    // Jira References - KNOV-119
    it('Verify Open Profile Editor Screen using User Creator menu option - [22409003]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 16:43:54 GMT
        StepLogger.caseId = 22409003;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await AdminLoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon.');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The menu list should be opened.');
        await AdminHomePageHelper.verifySideMenuDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Manage People.');
        await AdminHomePageHelper.clickOnManagePeopleButton();
        StepLogger.verification('The sub menu list should be opened.');
        await AdminHomePageHelper.verifyManagePeopleSubMenu();

        StepLogger.stepId(3);
        StepLogger.step('Verify that the option User Creator should be available.');
        StepLogger.verification('The option User Creator should be available.');
        await AdminHomePageHelper.verifyUserCreatorDisplayed();

        StepLogger.stepId(4);
        StepLogger.step('Click on User Creator.');
        await AdminHomePageHelper.clickOnUserCreatorOption();
        StepLogger.verification('Profile Editor page should be displayed.');
        await ProfileEditorHelper.verifyProfileEditorPageDisplayed();
    });

    // Jira References - KNOV-119
    it('Verify User & Group Finder  menu option - [22409006]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 17:30:50 GMT
        StepLogger.caseId = 22409006;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await AdminLoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon.');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The menu list should be opened.');
        await AdminHomePageHelper.verifySideMenuDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Manage People.');
        await AdminHomePageHelper.clickOnManagePeopleButton();
        StepLogger.verification('The sub menu list should be opened.');
        await AdminHomePageHelper.verifyManagePeopleSubMenu();

        StepLogger.stepId(3);
        StepLogger.step('Verify that the option User & Group Finder should be available.');
        StepLogger.verification('The option User & Group Finder should be available.');
        await AdminHomePageHelper.verifyUserAndGroupFinderOptionIsAvailable();

        StepLogger.stepId(4);
        StepLogger.step('Click on User & Group Finder.');
        await AdminHomePage.managePeople.userGroupFinder.clickButton();
        StepLogger.verification('User & Group Finder page should be displayed.');
        await ManagePeople1Helper.verifyUserAndGroupFinderPageDisplayed();
    });

    // Jira References - KNOV-119
    it('Verify Open Profile Editor - Content Subscriptions tab for an existing user - [22409013]', async () => {
        // Auto generated by aurea-automation - util on Sat, 02 Mar 2019 01:49:23 GMT
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22409013;

        StepLogger.preCondition('A user should be created to be able to find C22409048.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('User and Group Finder page should be opened C22409006.');
        await AdminHomePageHelper.navigateToUserAndGroupFinder(true);

        StepLogger.stepId(1);
        StepLogger.step(`Enter Search Criteria.
        e.g First Name.`);
        StepLogger.verification('User should be to enter the search criteria.');
        await ProfileEditorHelper.enterAndVerifyUserNameSearchCriteria(userName);

        StepLogger.stepId(2);
        StepLogger.step('Click Search.');
        await ProfileEditorHelper.clickSearch();
        StepLogger.verification('All Users matching the search criteria should be displayed.');
        await ProfileEditorHelper.verifyResultDisplayed(userName);

        StepLogger.stepId(3);
        StepLogger.step('Click on the user name.');
        StepLogger.verification('Profile Editor page for that user should be displayed.');
        await ProfileEditorHelper.enterAndVerifyProfileEditorPageDisplayedForUser(userName);

        StepLogger.stepId(4);
        StepLogger.step('Click Content Subscriptions tab.');
        await ProfileEditorHelper.clickContentSubscriptionsTab();
        StepLogger.verification('The fields of Content Subscriptions tab should be displayed.');
        await ProfileEditorHelper.verifyContentSubscriptionsFields();
    });

    // Jira References - KNOV-119
    it('Verify Content Subscriptions tab is enabled when user is saved. - [22409048]', async () => {
        // Auto generated by aurea-automation - util on Sat, 02 Mar 2019 01:52:05 GMT
        const userName = await PageHelper.getUniqueId();
        const password = await PageHelper.getUniqueId();
        const email = await RandomHelper.getRandomEmail();
        const roleName = ProfileEditorConstant.testData.defRole;
        const accessLevel = ProfileEditorConstant.testData.defAccessLevel;
        StepLogger.caseId = 22409048;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await AdminLoginPageHelper.loginAsAdmin();
        StepLogger.preCondition('Profile Editor page should be opened for new User C22409003.');
        await AdminHomePageHelper.navigateToEditProfilePage();

        StepLogger.stepId(1);
        StepLogger.step(`Enter a valid  unique name in the username, user"s first name and last name in
        the "User Name:", "First Name:" and "Last Name:" fields.`);
        StepLogger.verification(`The entered values should be displayed in the "User Name:", "First Name:"
        and "Last Name:" fields.`);
        await ProfileEditorHelper.enterAndVerifyProfileMandatoryFields(userName);

        StepLogger.stepId(2);
        StepLogger.step(`Enter valid password (with length 6 to 64 and without spaces) in the "Password:"
        field and enter the same value in the "Confirm Password" field.`);
        StepLogger.verification(`The values entered in the "Password:" and "Confirm Password:"
        fields should be masked.`);
        await ProfileEditorHelper.enterAndVerifyPassword(password);

        StepLogger.stepId(3);
        StepLogger.step(`Enter valid unique and non-registered email address (format: abc@gmail.com)
        in the "Email Address:" field.`);
        StepLogger.verification('The entered value should be displayed in the "Email Address:" field.');
        await ProfileEditorHelper.enterAndVerifyEmail(email);

        StepLogger.stepId(4);
        StepLogger.step('Enter valid value in the text area of the "Enter Bio Information:" field.');
        StepLogger.verification(`The entered value should be displayed in the text area of the
        "Enter Bio Information:" field.`);
        await ProfileEditorHelper.enterAndVerifyBio(ProfileEditorConstant.testData.defBio);

        StepLogger.stepId(5);
        StepLogger.step('In the "Roles: section, check the checkbox of one or more options displayed.');
        await ProfileEditorHelper.selectRole(roleName);
        StepLogger.verification('The selected options should be checked in the "Roles:" field.');
        await ProfileEditorHelper.verifyRoleIsSelected(roleName);

        StepLogger.stepId(6);
        StepLogger.step(`Verify if the default access level as "Public" is auto populated just below the
        select button of the "Access Levels" fields.`);
        StepLogger.verification(`The default access level as "Public" should be auto populated just below
        the select button of the "Access Levels" fields.`);
        await ProfileEditorHelper.verifyAccessLevelIsSelected(accessLevel);

        StepLogger.stepId(7);
        StepLogger.step('Click Save.');
        await ProfileEditorHelper.clickSave();
        StepLogger.verification('User Saved Successfully message should be displayed.');
        await ProfileEditorHelper.verifyUserSaved();

        StepLogger.stepId(8);
        StepLogger.step('Verify that the Content Subscriptions tab is enabled.');
        StepLogger.verification('Content Subscriptions tab should be enabled.');
        await ProfileEditorPage.tabs.titles.subscription.verifyDisplayedStatus();

        StepLogger.stepId(9);
        StepLogger.step('Click on Content Subscriptions Tab.');
        await ProfileEditorHelper.clickContentSubscriptionsTab();
        StepLogger.verification('The fields of Content Subscriptions tab should be displayed.');
        await ProfileEditorHelper.verifyContentSubscriptionsFields();
    });

    // Jira References - KNOV-119
    it('Verify Create Email Subscription button - [22409912]', async () => {
        // Auto generated by aurea-automation - util on Mon, 04 Mar 2019 18:33:02 GMT
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22409912;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069.');
        StepLogger.preCondition('A user should be created to be able to find C22409048.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('User and Group Finder page should be opened C22409006.');
        await ProfileEditorHelper.searchAndDisplayUserGoToContentSubscriptions(userName, true);

        StepLogger.stepId(1);
        StepLogger.step('Verify Create Email Subscription button should be available.');
        StepLogger.verification('Create Email Subscription button should be available.');
        await ProfileEditorHelper.verifyCreateEmailSubscriptionButton();

        StepLogger.stepId(2);
        StepLogger.step('Click Create Email Subscription.');
        StepLogger.verification('Email Subscription - Step 1 should be displayed.');
        await ProfileEditorHelper.clickEmailSubscriptionAndVerifyStep1();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Content of Email Subscription Step1.');
        StepLogger.verification('Category, Send Emails drop downs and Next and Cancel buttons should be available.');
        await ProfileEditorHelper.verifyEmailSubscriptionStep1Fields();
    });

    // Jira References - KNOV-119
    it('Verify Create Email Subscription -Step 1 for Knowledge Base - [22409951]', async () => {
        // Auto generated by aurea-automation - util on Mon, 04 Mar 2019 21:10:53 GMT
        const userName = await PageHelper.getUniqueId();
        const popUpAttr = ProfileEditorPage.popUps;
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        StepLogger.caseId = 22409951;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('Email Subscription Step 1 should be displayed. C22409912.');
        await ProfileEditorHelper.searchAndDisplayUserGoToEmailSubscription(userName, true);

        StepLogger.stepId(1);
        StepLogger.step('Click on Category drop down.');
        StepLogger.verification('Two options - Knowledge Base and Communities should be displayed.');
        await ProfileEditorHelper.clickAndValidateCategoryDd();

        StepLogger.stepId(2);
        StepLogger.step('Select Knowledge Base.');
        StepLogger.verification('Knowledge base should be selected.');
        await ProfileEditorHelper.selectAndValidateCategorySelected(labels.category.knowledgeBase);

        StepLogger.stepId(3);
        StepLogger.step('Click Send Emails.');
        StepLogger.verification('Three options Immediately, Daily and weekly should be displayed.');
        await ProfileEditorHelper.clickAndValidateEmailDd();

        StepLogger.stepId(4);
        StepLogger.step(`Select any option.
        Click Next,`);
        await DropDownHelper.selectOptionByText(popUpAttr.emailSubscriptionStep1.sendEmailsDropDown,
            labels.emails.immediately);
        StepLogger.verification('Email Subscription step 2 should be displayed.');
        await ProfileEditorHelper.clickNextAndVerifyEmailSubscriptionStep2();
    });
});
