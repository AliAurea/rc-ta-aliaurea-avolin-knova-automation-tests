import { StepLogger } from '../../../../core/logger/step-logger';
import { DropDownHelper } from '../../../components/html/dropdown-helper';
import { PageHelper } from '../../../components/html/page-helper';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { LanguageManagementPageConstant } from '../../../page-objects/pages/administer-system/language-management-page/language-management-page.constant';
import { CommonPageHelper } from '../../../page-objects/pages/common/common-page.helper';
import { ProfileEditorConstant } from '../../../page-objects/pages/profile-editor/profile-editor.constant';
import { ProfileEditorHelper } from '../../../page-objects/pages/profile-editor/profile-editor.helper';
import { ProfileEditorPage } from '../../../page-objects/pages/profile-editor/profile-editor.po';
import { ProfileEditor1Helper } from '../../../page-objects/pages/profile-editor/profile-editor1.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.healthCheckSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    // Jira References - KNOV-119
    it('Verify Create Email Subscription Step 2 for Knowledge Base - [22411166]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 14:09:14 GMT
        const language = LanguageManagementPageConstant.languages.english;
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        const titleContent = await PageHelper.getUniqueId();
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411166;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription Step 2 should be displayed after selecting Knowledge Base
        in Step 1. C22409951.`);
        await ProfileEditorHelper.searchAndDisplayUserGoToEmailSubscriptionStep2(userName, true, labels.category.knowledgeBase);

        StepLogger.stepId(1);
        StepLogger.step('Click on Language');
        StepLogger.verification('All the configured Languages should be displayed.');
        await ProfileEditorHelper.clickAndValidateLanguageDd();

        StepLogger.stepId(2);
        StepLogger.step('Select Language');
        StepLogger.verification('Language should be selected.');
        await ProfileEditorHelper.selectAndValidateLanguageSelected(language);

        StepLogger.stepId(3);
        StepLogger.step('Set Title Contents.');
        StepLogger.verification('Title Contents can be set.');
        await ProfileEditorHelper.enterAndValidateTitleContent(titleContent);

        StepLogger.stepId(4);
        StepLogger.step('Click Select for Segments.');
        StepLogger.verification('Select Universal Metadata dialog should be displayed.');
        await ProfileEditorHelper.clickAndVerifySelectSegments();

        StepLogger.stepId(5);
        StepLogger.step(`Click on Any of the Segments.
        Click Add.`);
        StepLogger.verification('Selected Segments should be displayed in the list below.');
        await ProfileEditorHelper.selectAndVerifySelectedSegment();

        StepLogger.stepId(6);
        StepLogger.step(`Click on Any of the Segments in Selected section.
        Click Remove (optional).`);
        StepLogger.verification('Selected Segments should be removed from the list below.');
        await ProfileEditorHelper.removeAndVerifySelectedSegment();

        StepLogger.stepId(7);
        StepLogger.step('Click OK.');
        await ProfileEditorHelper.clickOk();
        StepLogger.verification(`The Select Universal Metadata dialog should be closed.
        The selected Segments should be displayed in Email Subscription Step dialog.`);
        await ProfileEditorHelper.verifyAddedProduct();

        StepLogger.stepId(8);
        StepLogger.step('Click Submit.');
        await ProfileEditorHelper.clickSubmit();
        StepLogger.verification('Email Subscription item should be added in the list.');
        await ProfileEditorHelper.verifyEmailSubscriptionKnowledgeBase(ProfileEditorConstant.testData.defMetadataProduct);

        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Create Email Subscription -Step 1 for Communities - [22411182]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 21:15:19 GMT
        const popUpAttr = ProfileEditorPage.popUps;
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411182;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('Email Subscription Step 1 should be displayed. C22409912.');
        await ProfileEditorHelper.searchAndDisplayUserGoToEmailSubscription(userName, true);

        StepLogger.stepId(1);
        StepLogger.step('Click on Category drop down.');
        StepLogger.verification('Two options - Knowledge Base and Communities should be displayed.');
        await ProfileEditorHelper.clickAndValidateCategoryDd();

        StepLogger.stepId(2);
        StepLogger.step('Select Communities');
        StepLogger.verification('Communities should be selected.');
        await ProfileEditorHelper.selectAndValidateCategorySelected(labels.category.communities);

        StepLogger.stepId(3);
        StepLogger.step('Click Send Emails.');
        StepLogger.verification('Three options Immediately, Daily and weekly should be displayed.');
        await ProfileEditorHelper.clickAndValidateEmailDd();

        StepLogger.stepId(4);
        StepLogger.step('Select any option. Click Next,');
        await DropDownHelper.selectOptionByText(popUpAttr.emailSubscriptionStep1.sendEmailsDropDown,
            labels.emails.immediately);
        StepLogger.verification('Email Subscription step 2 should be displayed.');
        await ProfileEditorHelper.clickNextAndVerifyEmailSubscriptionStep2();

        StepLogger.postCondition('Cancel Subscription action');
        await ProfileEditorHelper.clickCancel();
        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Create Email Subscription Step 2 for Communities - [22411183]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 21:21:42 GMT
        const titleContent = await PageHelper.getUniqueId();
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        const defCommunity = ProfileEditorConstant.testData.defCommunity;
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411183;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069.');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription Step 2 should be displayed after selecting Knowledge Base
        in Step 1. C22409951.`);
        await ProfileEditorHelper.searchAndDisplayUserGoToEmailSubscriptionStep2(userName, true, labels.category.communities);

        StepLogger.stepId(1);
        StepLogger.step('Click on Community.');
        StepLogger.verification('All the available communities should be displayed.');
        await ProfileEditorHelper.clickAndValidateCommunityDd();

        StepLogger.stepId(2);
        StepLogger.step('Select Community');
        StepLogger.verification('Community should be selected.');
        await ProfileEditorHelper.selectAndValidateCommunitySelected(defCommunity);

        StepLogger.stepId(3);
        StepLogger.step('Set Title Contents.');
        StepLogger.verification('Title Contents can be set.');
        await ProfileEditorHelper.enterAndValidateTitleContent(titleContent);

        StepLogger.stepId(4);
        StepLogger.step('Check/Uncheck Check boxes for Thread types.');
        StepLogger.verification('User should be able to check/Uncheck Thread Types.');
        await ProfileEditorHelper.checkAndUncheckThreadTypes();

        StepLogger.stepId(5);
        StepLogger.step('Click Submit.');
        await ProfileEditorHelper.clickSubmit();
        StepLogger.verification('Email Subscription item should be added in the list.');
        await ProfileEditorHelper.verifyEmailSubscriptionCommunities(titleContent);

        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Delete Email Subscription - [22412308]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 02:23:31 GMT
        const userName = await PageHelper.getUniqueId();
        const titleContent = await PageHelper.getUniqueId();
        StepLogger.caseId = 22412308;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription for Communities/Knowledge Base should be created to be able
        to Edit. C22411183/C22411166.`);
        await ProfileEditorHelper.searchUserAndCreateAnEmailSubscriptionCommunities(userName, true, titleContent);

        StepLogger.stepId(1);
        StepLogger.step('Verify that Delete button is available for the EMail Subscription.');
        StepLogger.verification('Delete button should be available.');
        await ProfileEditorHelper.verifyFirstDeleteButton();

        // verification for Step 2 is covered in step 3
        StepLogger.stepId(2);
        StepLogger.step('Click Delete.');
        await ProfileEditorHelper.clickFirstDelete();
        StepLogger.verification('A confirmation dialog should be displayed.');

        StepLogger.stepId(3);
        StepLogger.step('Click Yes.');
        await CommonPageHelper.verifyConfirmatioMessageDisplayedAndClickYes();
        StepLogger.verification(`The confirmation dialog should be dismissed.
        The Email Subscription should be deleted.`);
        await ProfileEditorHelper.verifyEmailSubscriptionCummunitiesDeleted(titleContent);
    });

    // Jira References - KNOV-119
    it('Verify Select RSS Feeds URL - [22411197]', async () => {
        // Auto generated by aurea-automation - util on Tue, 05 Mar 2019 23:07:43 GMT
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411197;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('Profile Editor page should be opened C22409013/C22409048.');
        await ProfileEditorHelper.searchAndDisplayUserGoToContentSubscriptions(userName, true);

        StepLogger.stepId(1);
        StepLogger.step('Click Select RSS Feeds button.');
        StepLogger.verification('Select RSS Feeds dialog should be displayed.');
        await ProfileEditorHelper.clickAndValidateSelectRSSFeeds();

        StepLogger.stepId(2);
        StepLogger.step('Click on any of the URL.');
        StepLogger.verification('The URL should be opened in the new tab in the browser.');
        await ProfileEditorHelper.clickAndVerifyWindowOpened();

        StepLogger.stepId(3);
        StepLogger.step('Click Close.');
        await ProfileEditorHelper.clickClose();
        StepLogger.verification('Select RSS Feeds dialog should be closed.');
        await ProfileEditorHelper.verifySelectRSSClosed();
    });

     // Jira References - KNOV-119
    it('Verify Select RSS Feeds button - [22411217]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 17:35:16 GMT
        const userName = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411217;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('Profile Editor page should be opened C22409013/C22409048.');
        await ProfileEditorHelper.searchAndDisplayUserGoToContentSubscriptions(userName, true);

        StepLogger.stepId(1);
        StepLogger.step('Verify Select RSS Feeds button should be available.');
        StepLogger.verification('Select RSS Feeds button should be available.');
        await ProfileEditorHelper.validateSelectRSSFeedsButton();

        StepLogger.stepId(2);
        StepLogger.step('Click Select RSS Feeds button.');
        StepLogger.verification('Select RSS Feeds dialog should be displayed.');
        await ProfileEditorHelper.clickAndValidateSelectRSSFeeds();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Content of RSS Feeds dialog box.');
        StepLogger.verification('A list of available RSS feeds are displayed with Name, Description, and URL.');
        await ProfileEditorHelper.verifySelectRSSFeedsFields();

        StepLogger.postCondition('Close emailSubscription');
        await ProfileEditorHelper.clickClose();
        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Edit Email Subscription -Step 1 for Knowledge Base - [22411413]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 18:05:26 GMT
        const userName = await PageHelper.getUniqueId();
        const titleContent = await PageHelper.getUniqueId();
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        StepLogger.caseId = 22411413;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription for Knowledge base should be created to be able to Edit.
        C22411166.`);
        await ProfileEditor1Helper.searchUserAndCreateAnEmailSubscriptionKB(userName, true, titleContent);

        StepLogger.stepId(1);
        StepLogger.step('Verify Edit button should be available for Document type Email Subscription.');
        StepLogger.verification('Edit button should be available.');
        await ProfileEditorHelper.verifyFirstEditButtonInTable();

        StepLogger.stepId(2);
        StepLogger.step('Click on Edit button.');
        await ProfileEditorHelper.clickFirstEditButtonInTable();
        StepLogger.verification('Email Subscription Step 1 dialog should be displayed.');
        await ProfileEditorHelper.verifyEmailSubscriptionStep1Fields();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Category.');
        await ProfileEditorHelper.clickAndValidateCategoryDd();
        StepLogger.verification('Knowledge base should be selected.');
        await ProfileEditorHelper.selectAndValidateCategorySelected(labels.category.knowledgeBase);

        StepLogger.stepId(4);
        StepLogger.step('Verify Send Emails.');
        await ProfileEditorHelper.clickAndValidateEmailDd();
        StepLogger.verification('Option Selected while creating the subscription should be displayed.');
        await ProfileEditor1Helper.selectAndValidateSendEmailSelected(labels.emails.immediately);

        StepLogger.stepId(5);
        StepLogger.step('Click Next,');
        StepLogger.verification('Email Subscription step 2 should be displayed.');
        await ProfileEditorHelper.clickNextAndVerifyEmailSubscriptionStep2();

        StepLogger.postCondition('Cancel Email Subscription');
        await ProfileEditorHelper.clickCancel();
        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Cancel Delete Email Subscription - [22412300]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 21:17:28 GMT
        const userName = await PageHelper.getUniqueId();
        const titleContent = await PageHelper.getUniqueId();
        StepLogger.caseId = 22412300;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription for Knowledge base should be created to be able to Edit.
        C22411166.`);
        await ProfileEditor1Helper.searchUserAndCreateAnEmailSubscriptionKB(userName, true, titleContent);

        StepLogger.stepId(1);
        StepLogger.step('Verify that Delete button is available for the EMail Subscription.');
        StepLogger.verification('Delete button should be available.');
        await ProfileEditorHelper.verifyFirstDeleteButton();

        // Step 2 verification is covered in step 3
        StepLogger.stepId(2);
        StepLogger.step('Click Delete.');
        await ProfileEditorHelper.clickFirstDelete();
        StepLogger.verification('A confirmation dialog should be displayed.');

        StepLogger.stepId(3);
        StepLogger.step('Click No.');
        await CommonPageHelper.verifyConfirmatioMessageDisplayedAndClickNo();
        StepLogger.verification(`The confirmation dialog should be dismissed.
        The Email Subscription should not be deleted.`);
        await ProfileEditorHelper.verifyEmailSubscriptionKnowledgeBase(ProfileEditorConstant.testData.defMetadataProduct);

        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Edit Email Subscription -Step 1 for Communities - [22411426]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 21:35:33 GMT
        const userName = await PageHelper.getUniqueId();
        const titleContent = await PageHelper.getUniqueId();
        const labels = ProfileEditorConstant.popUps.dropdowns.options;
        StepLogger.caseId = 22411426;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition('Email Subscription for Communities should be created to be able to Edit. C22411183.');
        await ProfileEditorHelper.searchUserAndCreateAnEmailSubscriptionCommunities(userName, true, titleContent);

        StepLogger.stepId(1);
        StepLogger.step('Verify Edit button should be available for Community type Email Subscription.');
        StepLogger.verification('Edit button should be available.');
        await ProfileEditorHelper.verifyFirstEditButtonInTable();

        StepLogger.stepId(2);
        StepLogger.step('Click on Edit button.');
        await ProfileEditorHelper.clickFirstEditButtonInTable();
        StepLogger.verification('Email Subscription Step 1 dialog should be displayed.');
        await ProfileEditorHelper.verifyEmailSubscriptionStep1Fields();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Category.');
        await ProfileEditorHelper.clickAndValidateCategoryDd();
        StepLogger.verification('Communities should be selected.');
        await ProfileEditorHelper.selectAndValidateCategorySelected(labels.category.communities);

        StepLogger.stepId(4);
        StepLogger.step('Verify Send Emails.');
        await ProfileEditorHelper.clickAndValidateEmailDd();
        StepLogger.verification('Option Selected while creating the subscription should be displayed.');
        await ProfileEditor1Helper.selectAndValidateSendEmailSelected(labels.emails.immediately);

        StepLogger.stepId(5);
        StepLogger.step('Click Next.');
        StepLogger.verification('Email Subscription step 2 should be displayed.');
        await ProfileEditorHelper.clickNextAndVerifyEmailSubscriptionStep2();

        StepLogger.postCondition('Cancel Email Subscription');
        await ProfileEditorHelper.clickCancel();
        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });

    // Jira References - KNOV-119
    it('Verify Edit Email Subscription Step 2 for Knowledge Base - [22411434]', async () => {
        // Auto generated by aurea-automation - util on Wed, 06 Mar 2019 21:50:48 GMT
        const userName = await PageHelper.getUniqueId();
        const defLanguage = LanguageManagementPageConstant.languages.english;
        const newTitleContent = await PageHelper.getUniqueId();
        const newSegment = ProfileEditorConstant.testData.defMetadataProduct2;
        const defSegment = ProfileEditorConstant.testData.defMetadataProduct;
        const titleContent = await PageHelper.getUniqueId();
        StepLogger.caseId = 22411434;

        StepLogger.preCondition('Logged in to Knova Administrator test environment with admin credentials. C22308069');
        await ProfileEditorHelper.createUser(userName);
        StepLogger.preCondition(`Email Subscription Step 2 should be displayed after Clicking
        Next in Step 1. C22411413.`);
        await ProfileEditor1Helper.searchUserAndGoToEditEmailSubscriptionKB(userName, true, titleContent);

        StepLogger.stepId(1);
        StepLogger.step('Verify Language');
        StepLogger.verification('Option Selected while creating the subscription should be displayed.');
        await ProfileEditor1Helper.validateSelectedLanguage(defLanguage);

        StepLogger.stepId(2);
        StepLogger.step('Select/Edit Language');
        await ProfileEditorHelper.clickAndValidateLanguageDd();
        StepLogger.verification('Language should be selected.');
        await ProfileEditorHelper.selectAndValidateLanguageSelected(defLanguage);

        StepLogger.stepId(3);
        StepLogger.step('Verify Title Contents.');
        StepLogger.verification('Title Contents set while creating the subscription should be displayed.');
        await ProfileEditor1Helper.validateCurrentTitleContent(titleContent);

        StepLogger.stepId(4);
        StepLogger.step('Set/Edit Title Contents.');
        StepLogger.verification('Title Contents can be set.');
        await ProfileEditorHelper.enterAndValidateTitleContent(newTitleContent);

        StepLogger.stepId(5);
        StepLogger.step('Verify Segements');
        StepLogger.verification('Segments selected while creating the subscription should be' +
        'displayed in the list below.');
        await ProfileEditor1Helper.verifyCurrentSegment(defSegment);

        StepLogger.stepId(6);
        StepLogger.step('Click Select for Segments.');
        StepLogger.verification('Select Universal Metadata dialog should be displayed.');
        await ProfileEditorHelper.clickAndVerifySelectSegments();

        // step 7 and 8 is covered in step 9
        StepLogger.stepId(7);
        StepLogger.step(`Click on Any of the Segments.
        Click Add.`);
        StepLogger.verification('Selected Segments should be displayed in the list below.');

        StepLogger.stepId(8);
        StepLogger.step(`Click on Any of the Segments in Selected section.
        Click Remove (optional).`);
        StepLogger.verification('Selected Segments should be removed from the list below.');

        StepLogger.stepId(9);
        StepLogger.step('Click OK.');
        StepLogger.verification(`The Select Universal Metadata dialog should be closed.
        The selected Segments should be displayed in Email Subscription Step dialog.`);
        await ProfileEditor1Helper.selectAndVerifyNewSegment(newSegment);

        StepLogger.stepId(10);
        StepLogger.step('Click Submit.');
        await ProfileEditorHelper.clickSubmit();
        StepLogger.verification('Edited Email Subscription item should be displayed in the list.');
        await ProfileEditorHelper.verifyEmailSubscriptionKnowledgeBase(newTitleContent);

        StepLogger.postCondition('Cancel User Edit');
        await ProfileEditorHelper.clickCancelUserEdit();
        StepLogger.postCondition('Delete created user');
        await ProfileEditorHelper.deleteUser(userName, false);
    });
});
