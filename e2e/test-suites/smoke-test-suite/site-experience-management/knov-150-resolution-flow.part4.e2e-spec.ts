import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { Constants } from '../../../components/misc-utils/constants';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { CommunitiesManagerHelper } from '../../../page-objects/pages/manage-communities/communities-manager/communities-manager.helper';
import { CommunitiesManagerPage } from '../../../page-objects/pages/manage-communities/communities-manager/communities-manager.po';
import { ResolutionFlowConstant } from '../../../page-objects/pages/manage-site-experience/resolution-flow/resolution-flow.constants';
import { ResolutionFlowHelper } from '../../../page-objects/pages/manage-site-experience/resolution-flow/resolution-flow.helper';
import { ResolutionFlowPage } from '../../../page-objects/pages/manage-site-experience/resolution-flow/resolution-flow.po';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await AdminLoginPageHelper.logout(true);
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.loginAsAdmin();
    });

    // Jira References - KNOV-1782
    it('Validation of the admin user adding a new resolution flow by editing the homepage options of a community - [22421192]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:00:56 GMT
        StepLogger.caseId = 22421192;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        const community = await ResolutionFlowHelper.selectCommunityToEdit();
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog"
            message box with the message as "The moderator for this resolution flow has been set to the Community"s moderator:
            "<set moderator>" should be displayed if the moderator selected is not the set one for the selected community.
            Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(community);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
            Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values as
            mentioned in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(community);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(community);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Home Page Options" button.');
        await CommunitiesManagerHelper.clickEditHomePageButton();
        StepLogger.verification('The "Community Homepage Options" window should be displayed.');
        await CommunitiesManagerHelper.verifyHomePageDialog(true);

        StepLogger.stepId(6);
        StepLogger.step(`Select the radio button of a different option other than the one that was selected before and click the "Submit" button.
            Note: If selecting the second option, then enter a valid template name before clicking the "Submit" button.`);
        const template = await ResolutionFlowHelper.changeCommunityHomePageAndSubmit();
        StepLogger.verification('The "Community Homepage Options" window should be closed and the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Home Page Options" button with the same community selected and verify if the values are
            displayed as updated in the "Community Home Page Options" window.`);
        await CommunitiesManagerHelper.clickEditHomePageButton();
        StepLogger.verification('The values should be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunityHomePage(template);

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerPage.homePageDialog.cancelBtn.clickButton();
        StepLogger.verification('The "Community Home Page Options" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the list of available
            resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among the list of available
            resolution flows with the values in the "Name", "Description" (value of internal description), "Visible" (tick mark), Community Used and
            "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true, community);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1847
    it(`Validation if the admin user can discard the update made to the home page options of the community using the "Cancel" button while adding
        a new resolution flow - [22423243]`, async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:04:11 GMT
        StepLogger.caseId = 22423243;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        const community = await ResolutionFlowHelper.selectCommunityToEdit();
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog" message box with the
            message as "The moderator for this resolution flow has been set to the Community"s moderator: "<set moderator>" should be displayed
            if the moderator selected is not the set one for the selected community.
        Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(community);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
            Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values as mentioned
            in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(community);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(community);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Home Page Options" button.');
        await CommunitiesManagerHelper.clickEditHomePageButton();
        StepLogger.verification('The "Community Homepage Options" window should be displayed.');
        await CommunitiesManagerHelper.verifyHomePageDialog(true);

        StepLogger.stepId(6);
        StepLogger.step(`Select the radio button of a different option other than the one that was selected before and click the "Cancel" button.
            Note: If selecting the second option, then enter a valid template name before clicking the "Cancel" button.`);
        const template = await ResolutionFlowHelper.changeCommunityHomePageAndCancel();
        StepLogger.verification('The "Community Homepage Options" window should be closed and the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Home Page Options" button with the same community selected and verify if the values are
            displayed as updated in the "Community Home Page Options" window.`);
        await CommunitiesManagerHelper.clickEditHomePageButton();
        StepLogger.verification('The values should not be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunityHomePage(template);

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerPage.homePageDialog.cancelBtn.clickButton();
        StepLogger.verification('The "Community Home Page Options" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the list of available
            resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among the list of available
            resolution flows with the values in the "Name", "Description" (value of internal description), "Visible" (tick mark), Community Used and
            "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true, community);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1784
    it('Validation of the admin user editing the values in the "Resolution Flow Designer" of an existing resolution flow - [22423259]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:05:12 GMT
        StepLogger.caseId = 22423259;
        const resolutionFlow = `${PageHelper.getUniqueId()}${ResolutionFlowConstant.labels.test}`;

        StepLogger.preCondition('Create a Resolution Flow');
        const moderator = await ResolutionFlowHelper.createResolutionFlow(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Name" of an existing resolution flow.');
        await ResolutionFlowHelper.selectResolutionFlow(resolutionFlow);
        StepLogger.verification('The details of the selected resolution should be displayed in the "Builder" tab of the "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyBuilderTabWithValues(resolutionFlow, moderator);

        StepLogger.stepId(2);
        StepLogger.step('Edit any of the available editable fields (e.g, un check the checkbox of "Make Visibility:" field)');
        await ResolutionFlowPage.builderTab.makeVisible.clickButton();
        StepLogger.verification('User should be able to edit any of the editable fields in the "Builder" tab of "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyMakeVisibleChecked();

        StepLogger.stepId(3);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of the page and the
            "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(4);
        StepLogger.step('To verify, navigate to the "Inbox" tab and verify if the selected resolution flow is displayed with the updated values.');
        StepLogger.verification('The "Builder" tab should be closed and he selected resolution flow should be displayed with the updated values.');
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true);

        StepLogger.stepId(5);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1848
    it(`Validation of the admin user adding a step with default values in the "Design Process" section when editing the existing resolution
        flow in the "Resolution Flow Manager" page - [22423273]`, async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:06:02 GMT
        StepLogger.caseId = 22423273;
        const resolutionFlow = `${PageHelper.getUniqueId()}${ResolutionFlowConstant.labels.test}`;

        StepLogger.preCondition('Create a Resolution Flow');
        const moderator = await ResolutionFlowHelper.createResolutionFlow(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Name" of a newly created resolution flow');
        await ResolutionFlowHelper.selectResolutionFlow(resolutionFlow);
        StepLogger.verification('The details of the selected resolution should be displayed in the "Builder" tab of the "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyBuilderTabWithValues(resolutionFlow, moderator);

        StepLogger.stepId(2);
        StepLogger.step('Verify if the "New Steps" button is displayed in the "Design Process" section.');
        StepLogger.verification('The "New Steps" button should be displayed in the "Design Process" section.');
        await ResolutionFlowPage.builderTab.newSteps.verifyDisplayedStatus();

        StepLogger.stepId(3);
        StepLogger.step('Click the "New Steps" button.');
        await ResolutionFlowPage.builderTab.newSteps.clickButton();
        StepLogger.verification(`A new tab as "Process Designer for <res flow name>" should be opened in the "Resolution Flow Manager" page and the user
            should be navigated to the "Process Designer for <res flow name>" tab.`);
        await ResolutionFlowHelper.verifyProcessDesignerTab(true);

        StepLogger.stepId(4);
        StepLogger.step(`Verify if a new step is added along with a "x" button in the end of the added step along with the below buttons.
            - New Step
            - Expand All
            - Save`);
        StepLogger.verification(`A new step should be added along with a "x" button in the end of the added step along with the below buttons.
            - New Step
            - Expand All
            - Save`);
        await ResolutionFlowHelper.verifyProcessDesignerTabButtons();

        StepLogger.stepId(5);
        StepLogger.step('Click the > displayed just before the step1 or click the "Expand All" button.');
        await ResolutionFlowPage.processFlowTab.expandAll.clickButton();
        StepLogger.verification('The details of the added step should be displayed.');
        const stepName = await ResolutionFlowHelper.verifyStepsDetailsDisplayed();

        StepLogger.stepId(6);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowPage.processFlowTab.save.clickButton();
        StepLogger.verification('A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of the page.');
        await ResolutionFlowHelper.verifyStepsSuccessMessage();

        StepLogger.stepId(7);
        StepLogger.step('To verify, navigate to the "Inbox" tab and click on the resolution flow that was updated in previous steps.');
        await ResolutionFlowHelper.selectResolutionFlowFromInbox(resolutionFlow, moderator);
        StepLogger.verification(`The "Builder" and "Process Designer for <res flow name>" tabs should be closed and the details of
            the updated resolution flow should be displayed in the "Builder" tab with a new step with the provided name displayed
            in the "Design process" section.`);
        await ResolutionFlowHelper.verifyBuilderTabWithSteps(resolutionFlow, moderator, stepName);

        StepLogger.stepId(8);
        StepLogger.step('Click the "cancel" button.');
        await ResolutionFlowPage.builderTab.cancel.clickButton();
        StepLogger.verification('The "Builder" tab should be closed and the user should be navigated to the "Inbox" tab of "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyPageContent();

        StepLogger.stepId(9);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1849
    it(`Validation of the admin user adding a step in the "Design Process" section when editing the existing resolution flow in the
        "Resolution Flow Manager" page - [22423286]`, async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:07:05 GMT
        StepLogger.caseId = 22423286;
        const resolutionFlow = `${PageHelper.getUniqueId()}${ResolutionFlowConstant.labels.test}`;
        const stepName = `${ResolutionFlowConstant.elementNames.step}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Create a Resolution Flow');
        const moderator = await ResolutionFlowHelper.createResolutionFlow(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('Click on the "Name" of a newly created resolution flow');
        await ResolutionFlowHelper.selectResolutionFlow(resolutionFlow);
        StepLogger.verification('The details of the selected resolution should be displayed in the "Builder" tab of the "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyBuilderTabWithValues(resolutionFlow, moderator);

        StepLogger.stepId(2);
        StepLogger.step('Verify if the "New Steps" button is displayed in the "Design Process" section.');
        StepLogger.verification('The "New Steps" button should be displayed in the "Design Process" section.');
        await ResolutionFlowPage.builderTab.newSteps.verifyDisplayedStatus();

        StepLogger.stepId(3);
        StepLogger.step('Click the "New Steps" button.');
        await ResolutionFlowPage.builderTab.newSteps.clickButton();
        StepLogger.verification(`A new tab as "Process Designer for <res flow name>" should be opened in the "Resolution Flow Manager" page and the user
            should be navigated to the "Process Designer for <res flow name>" tab.`);
        await ResolutionFlowHelper.verifyProcessDesignerTab(true);

        StepLogger.stepId(4);
        StepLogger.step('Click the > displayed just before the step1 or click the "Expand All" button.');
        await ResolutionFlowPage.processFlowTab.expandAll.clickButton();
        StepLogger.verification('The details of the added step should be displayed.');
        await ResolutionFlowHelper.verifyStepsDetailsDisplayed();

        StepLogger.stepId(5);
        StepLogger.step('Updated the value in the "Step Name:" field.');
        await ResolutionFlowHelper.enterStepName(stepName);
        StepLogger.verification(`User should be able to edit the value of the "Step Name:" field and the updated name should be
            displayed even on the header of the step.`);
        await ResolutionFlowHelper.verifyStepName(stepName);

        StepLogger.stepId(6);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowPage.processFlowTab.save.clickButton();
        StepLogger.verification('A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of the page.');
        await ResolutionFlowHelper.verifyStepsSuccessMessage();

        StepLogger.stepId(7);
        StepLogger.step('To verify, navigate to the "Inbox" tab and click on the resolution flow that was updated in previous steps.');
        await ResolutionFlowHelper.selectResolutionFlowFromInbox(resolutionFlow, moderator);
        StepLogger.verification(`The "Builder" and "Process Designer for <res flow name>" tabs should be closed and the details of
            the updated resolution flow should be displayed in the "Builder" tab with a new step with the provided name displayed
            in the "Design process" section.`);
        await ResolutionFlowHelper.verifyBuilderTabWithSteps(resolutionFlow, moderator, stepName);

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await ResolutionFlowPage.builderTab.cancel.clickButton();
        StepLogger.verification('The "Builder" tab should be closed and the user should be navigated to the "Inbox" tab of "Resolution Flow Manager" page.');
        await ResolutionFlowHelper.verifyPageContent();

        StepLogger.stepId(9);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1787
    it(`Validation of the admin user can create a new resolution flow by copying an existing one form the "Resolution Flow Manager"
        page - [22423326]`, async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 07:08:02 GMT
        StepLogger.caseId = 22423326;
        const resolutionFlow = `${PageHelper.getUniqueId()}${ResolutionFlowConstant.labels.test}`;
        const copy = `${ResolutionFlowConstant.labels.copy}${resolutionFlow}`;

        StepLogger.preCondition('Create a Resolution Flow');
        const moderator = await ResolutionFlowHelper.createResolutionFlow(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('For an existing resolution flow click the copy symbol available in the "Copy" field.');
        await ResolutionFlowHelper.clickCopyResolutionFlow(resolutionFlow);
        StepLogger.verification('The "Copy Resflow Dialog" message box should be displayed.');
        await ResolutionFlowHelper.verifyCopyDialog();

        StepLogger.stepId(2);
        StepLogger.step('Enter a unique name in the "Name:" field and click the OK button.');
        await ResolutionFlowHelper.enterCopyNameAndClickOk(copy);
        StepLogger.verification(`The "Builder" tab should be displayed for the user with the name provided along with the details
            of the resolution flow selected in step 1.`);
        await ResolutionFlowHelper.verifyBuilderTabWithValues(copy, moderator);

        StepLogger.stepId(3);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top
            of the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(4);
        StepLogger.step('To verify, navigate to the "Inbox" tab and verify if the newly created resolution flow is displayed.');
        StepLogger.verification('The "Builder" tab should be closed and he selected resolution flow should be displayed.');
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator);

        StepLogger.stepId(5);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });
});
