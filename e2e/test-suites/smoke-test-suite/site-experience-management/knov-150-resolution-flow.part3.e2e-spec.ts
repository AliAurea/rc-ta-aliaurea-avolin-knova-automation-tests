import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { Constants } from '../../../components/misc-utils/constants';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { CommunitiesManagerHelper } from '../../../page-objects/pages/manage-communities/communities-manager/communities-manager.helper';
import { ResolutionFlowConstant } from '../../../page-objects/pages/manage-site-experience/resolution-flow/resolution-flow.constants';
import { ResolutionFlowHelper } from '../../../page-objects/pages/manage-site-experience/resolution-flow/resolution-flow.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await AdminLoginPageHelper.logout(true);
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.loginAsAdmin();
    });

    // Jira References - KNOV-1778
    it('Validation of the admin user adding a new resolution flow by editing the properties of a community - [22415414]', async () => {
        // Auto generated by aurea-automation - util on Tue, 12 Mar 2019 09:46:56 GMT
        StepLogger.caseId = 22415414;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        await ResolutionFlowHelper.selectCommunityOption(ResolutionFlowConstant.builderTab.generalDiscussions);
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog"
            message box with the message as "The moderator for this resolution flow has been set to the Community"s moderator:
            "<set moderator>" should be displayed if the moderator selected is not the set one for the selected community.
            Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
            Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values
            as mentioned in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Properties" button.');
        await CommunitiesManagerHelper.clickEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be displayed.');
        await CommunitiesManagerHelper.verifyEditCommunityDialog(true);

        StepLogger.stepId(6);
        StepLogger.step('Edit any of the editable field (e.g, Description) and click the "Submit" button.');
        await ResolutionFlowHelper.enterCommunityDescriptionAndSubmit();
        StepLogger.verification(`User should be able to edit the value in any of the editable fields and the "Edit Community"
            window should be closed with the user navigated to the "Community Manager" window.`);
        await ResolutionFlowHelper.verifyEditedCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Properties" button with the same community selected and verify if
            the values are displayed as updated in the "Edit Community" window.`);
        await CommunitiesManagerHelper.clickEditPropertiesButton();
        StepLogger.verification('The values should be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunityDescription();

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerHelper.cancelEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the
            list of available resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among
            the list of available resolution flows with the values in the "Name", "Description" (value of internal description),
            "Visible" (tick mark), Community Used and "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1838
    it(`Validation if the admin user can discard the update made to the properties of the community using the "Cancel" button
        while adding a new resolution flow - [22419141]`, async () => {
        // Auto generated by aurea-automation - util on Tue, 12 Mar 2019 09:46:56 GMT
        StepLogger.caseId = 22419141;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        await ResolutionFlowHelper.selectCommunityOption(ResolutionFlowConstant.builderTab.generalDiscussions);
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog"
            message box with the message as "The moderator for this resolution flow has been set to the Community"s moderator:
            "<set moderator>" should be displayed if the moderator selected is not the set one for the selected community.
            Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
            Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values as
            mentioned in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Properties" button.');
        await CommunitiesManagerHelper.clickEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be displayed.');
        await CommunitiesManagerHelper.verifyEditCommunityDialog(true);

        StepLogger.stepId(6);
        StepLogger.step('Edit any of the editable field (e.g, Description) and click the "Cancel" button.');
        await ResolutionFlowHelper.enterCommunityDescriptionAndSubmit();
        StepLogger.verification(`User should be able to edit the value in any of the editable fields and the "Edit Community"
            window should be closed with the user navigated to the "Community Manager" window.`);
        await ResolutionFlowHelper.verifyEditedCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Properties" button with the same community selected and verify if the
            values are displayed as updated in the "Edit Community" window.`);
        await CommunitiesManagerHelper.clickEditPropertiesButton();
        StepLogger.verification('The values should not be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunityDescription();

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerHelper.cancelEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(ResolutionFlowConstant.builderTab.generalDiscussions);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the list
            of available resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among the
            list of available resolution flows with the values in the "Name", "Description" (value of internal description), "Visible"
            (tick mark), Community Used and "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1780
    it('Validation of the admin user adding a new resolution flow by editing the visibility of a community - [22419142]', async () => {
        // Auto generated by aurea-automation - util on Tue, 12 Mar 2019 12:22:26 GMT
        StepLogger.caseId = 22419142;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        const community = await ResolutionFlowHelper.selectCommunityToEdit();
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog"
            message box with the message as "The moderator for this resolution flow has been set to the Community"s moderator:
            "<set moderator>" should be displayed if the moderator selected is not the set one for the selected community.
            Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(community);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
            Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values as
            mentioned in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(community);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(community);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Visibility" button.');
        await CommunitiesManagerHelper.clickEditVisibilityButton();
        StepLogger.verification('The "Edit Community" window should be displayed.');
        await CommunitiesManagerHelper.verifyEditVisibilityDialog(true);

        StepLogger.stepId(6);
        StepLogger.step(`In the "Visibility" field select a different option from the drop down list other than the one that
            was selected before and click the "Submit" button.`);
        const visibility = await ResolutionFlowHelper.changeCommunityVisibilityAndSubmit();
        StepLogger.verification(`User should be able to edit the value in the "Visibility" field and the "Edit Community"
            window should be closed with the user navigated to the "Community Manager" window.`);
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Visibility" button with the same community selected and verify if the
            values are displayed as updated in the "Edit Community" window.`);
        await CommunitiesManagerHelper.clickEditVisibilityButton();
        StepLogger.verification('The values should be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunitySelectedVisibility(visibility);

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerHelper.cancelEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the list
            of available resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among the list
            of available resolution flows with the values in the "Name", "Description" (value of internal description), "Visible" (tick mark),
            Community Used and "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true, community);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-1839
    it(`Validation if the admin user can discard the update made to the visibility of the community using the "Cancel" button while adding
        a new resolution flow - [22419143]`, async () => {
        // Auto generated by aurea-automation - util on Tue, 12 Mar 2019 13:25:03 GMT
        StepLogger.caseId = 22419143;
        const resolutionFlow = `${ResolutionFlowConstant.labels.test}${PageHelper.getUniqueId()}${PageHelper.getUniqueId()}`;

        StepLogger.preCondition('Execute step 1 to 6 of C22409868');
        let moderator = await ResolutionFlowHelper.createResolutionFlowAddCommunity(resolutionFlow);

        StepLogger.stepId(1);
        StepLogger.step('In the "Community:" field click the drop down list and select an option from the list displayed.');
        const community = await ResolutionFlowHelper.selectCommunityToEdit();
        StepLogger.verification(`The selected option should be displayed in the "Community:" field and the "--Webpage Dialog"
            message box with the message as "The moderator for this resolution flow has been set to the Community"s moderator:
            "<set moderator>" should be displayed if the moderator selected is not the set one for the selected community.
            Note: The message box will not be displayed if the moderator selected is the set one for the selected community.`);
        const message = await ResolutionFlowHelper.verifyCommunityAndMessage(community);

        StepLogger.stepId(2);
        StepLogger.step(`Click the OK button.
        Note: Skip this step if the message box is not displayed.`);
        if (message.length > Constants.number.zero) {
            await ResolutionFlowHelper.clickOkCommunityModeratorWindow();
        }
        StepLogger.verification(`The message box should be closed and the "Moderator:" field should be updated with values as
            mentioned in the message box of step 1.`);
        if (message.length > Constants.number.zero) {
            moderator = await ResolutionFlowHelper.verifyModeratorUpdated(message);
        }

        StepLogger.stepId(3);
        StepLogger.step('Click the "Edit" button available in the "Community" field.');
        await ResolutionFlowHelper.clickEditCommunity();
        StepLogger.verification('The "Community Manager" window should be displayed with the list of available communities.');
        await CommunitiesManagerHelper.verifyCommunitiesList();

        StepLogger.stepId(4);
        StepLogger.step(`Click on the community name that was selected in step 1 and verify if the below buttons are available
            in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await CommunitiesManagerHelper.clickCommunity(community);
        StepLogger.verification(`User should be able to select the community that was selected in step 1 and the below buttons
            should be available in the "Community Manager" window.
            - Edit Properties
            - Edit Visibility
            - Edit Homepage options
            - Delete`);
        await ResolutionFlowHelper.verifyCommunityAndButtons(community);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Edit Visibility" button.');
        await CommunitiesManagerHelper.clickEditVisibilityButton();
        StepLogger.verification('The "Edit Community" window should be displayed.');
        await CommunitiesManagerHelper.verifyEditVisibilityDialog(true);

        StepLogger.stepId(6);
        StepLogger.step(`In the "Visibility" field select a different option from the drop down list other than the one that
            was selected before and click the "Cancel" button.`);
        const visibility = await ResolutionFlowHelper.changeCommunityVisibilityAndCancel();
        StepLogger.verification(`User should be able to edit the value in the "Visibility" field and the "Edit Community"
            window should be closed with the user navigated to the "Community Manager" window.`);
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(7);
        StepLogger.step(`To verify, click the "Edit Visibility" button with the same community selected and verify if the
            values are displayed as updated in the "Edit Community" window.`);
        await CommunitiesManagerHelper.clickEditVisibilityButton();
        StepLogger.verification('The values should not be displayed as updated.');
        await ResolutionFlowHelper.verifyCommunitySelectedVisibility(visibility);

        StepLogger.stepId(8);
        StepLogger.step('Click the "Cancel" button.');
        await CommunitiesManagerHelper.cancelEditPropertiesButton();
        StepLogger.verification('The "Edit Community" window should be closed with the user navigated to the "Community Manager" window.');
        await ResolutionFlowHelper.verifyEditedCommunity(community);

        StepLogger.stepId(9);
        StepLogger.step('Close the "Community Manager" window by clicking the "X" option at the top right end of the window.');
        await PageHelper.closeAllWindowsAndSwitchToFirst();
        StepLogger.verification('User should be navigated to the "Resolution Flow Designer" page.');
        await ResolutionFlowHelper.verifyBuilderTab(true);

        StepLogger.stepId(10);
        StepLogger.step('Click the "Save" button.');
        await ResolutionFlowHelper.clickSaveButton();
        StepLogger.verification(`A message as "Resolution Flow successfully saved (<Date & Time>)" should be displayed on the top of
            the page and the "last Modified:" field should also be updated with the system date and time.`);
        await ResolutionFlowHelper.verifyMessageAndLastModified();

        StepLogger.stepId(11);
        StepLogger.step(`To verify, navigate to the "Inbox" tab and verify if the newly added resolution flow is displayed among the
            list of available resolution flows.`);
        StepLogger.verification(`The "Builder" tab should be closed and the newly added resolution flow should be displayed among the
            list of available resolution flows with the values in the "Name", "Description" (value of internal description), "Visible"
            (tick mark), Community Used and "Moderator" fields as entered in the previous steps.`);
        await ResolutionFlowHelper.verifyCreatedResolutionFlow(resolutionFlow, moderator, true, true, true, community);

        StepLogger.stepId(12);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('user should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });
});
