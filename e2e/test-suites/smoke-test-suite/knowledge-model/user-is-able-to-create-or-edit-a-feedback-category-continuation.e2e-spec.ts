import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { RandomHelper } from '../../../components/misc-utils/random-helper';
import { AdminHomePageHelper } from '../../../page-objects/pages/admin-home-page/admin-home.helper';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { CommonPageHelper } from '../../../page-objects/pages/common/common-page.helper';
import { KnowledgeModelConstant } from '../../../page-objects/pages/manage-knowledge/knowledge-model/knowledge-model.constant';
import { KnowledgeModelHelper } from '../../../page-objects/pages/manage-knowledge/knowledge-model/knowledge-model.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    // Jira References - KNOV-937
    it('To verify the "Cancel" button in the feedback metadata manager screen. - [22344982]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344982;
        await StepLogger.preCondition('Navigate to Feedback Metadata Manager page');
        await AdminLoginPageHelper.loginAsAdmin();
        await AdminHomePageHelper.navigateToFeedbackMetadataManager();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories. OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide a name under English language header.
        Provide a description under English language header
        ( If multiple languages are configured for your Knova system,
        you may add Category Name and Description to the appropriate fields under the language header)`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on cancel.');
        await KnowledgeModelHelper.clickOnCancelButton();
        StepLogger.verification('A confirmation message should pop up.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on No.');
        StepLogger.verification('The category should not get saved.');
        await KnowledgeModelHelper.verifyCategoryNotDisplayed(name);
    });

    // Jira References - KNOV-932
    it('To verify the error message when a duplicate description is provided in the description field. - [22344932]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT
        const categoryName = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();

        StepLogger.caseId = 22344932;
        await StepLogger.preCondition('Login and create a category');
        await AdminLoginPageHelper.loginAsAdmin();
        const catName = await KnowledgeModelHelper.createCategory(categoryName, description);

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide the Name under English language header.
        Provide a duplicate description under English language header.`);
        const name = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on Ok.');
        StepLogger.verification('The error message should be closed.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteCategory(catName);
    });

    // Jira References - KNOV-936
    it('To verify the "Cancel" button on the warning pop when the category hasn"t been saved. - [22344975]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344975;
        await StepLogger.preCondition('Login and create a catetory');
        await AdminLoginPageHelper.loginAsAdmin();
        const category = await KnowledgeModelHelper.createCategory();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide a name under English language header.
        Provide a description under English language header
        ( If multiple languages are configured for your Knova system, you may add Category
        Name and Description to the appropriate fields under the language header)`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step(`-Don"t click on save.
        -Click on another category in the left pane.`);
        await KnowledgeModelHelper.clickOnACategory(category);
        StepLogger.verification('A confirmation message should pop up.');
        await CommonPageHelper.verifyConfirmatioMessageDisplayedAndClickCancel();

        StepLogger.stepId(6);
        StepLogger.step('Click on Cancel.');
        StepLogger.verification(`confirmation pop should be closed and feedback metadata page should be
        displayed. The category should neither get saved nor get discarded.`);
        await KnowledgeModelHelper.verifyPopupClosedAndInformationNotSaved(name);

        StepLogger.postCondition('Close popup and clean up');
        await KnowledgeModelHelper.deleteCategory(category);
    });

    // Jira References - KNOV-934
    it('To verify the message when the created category is not saved and the user tries to perform another action. - [22344949]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344949;
        await StepLogger.preCondition('Login and create a category');
        await AdminLoginPageHelper.loginAsAdmin();
        const category = await KnowledgeModelHelper.createCategory();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide a name under English language header.
        Provide a description under English language header
        ( If multiple languages are configured for your Knova system, you may add Category Name and
        Description to the appropriate fields under the language header)`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step(`-Don"t click on save.
        -Click on another category in the left pane.`);
        await KnowledgeModelHelper.clickOnACategory(category);
        StepLogger.verification('A confirmation message should pop up.');
        await CommonPageHelper.verifyConfirmatioMessageDisplayedAndClickYes();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on Yes.');
        StepLogger.verification('The category should get saved.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteCategory(category);
    });
});
