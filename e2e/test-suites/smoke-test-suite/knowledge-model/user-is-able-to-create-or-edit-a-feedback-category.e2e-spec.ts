import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { RandomHelper } from '../../../components/misc-utils/random-helper';
import { AdminHomePageHelper } from '../../../page-objects/pages/admin-home-page/admin-home.helper';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { CommonPageHelper } from '../../../page-objects/pages/common/common-page.helper';
import { KnowledgeModelConstant } from '../../../page-objects/pages/manage-knowledge/knowledge-model/knowledge-model.constant';
import { KnowledgeModelHelper } from '../../../page-objects/pages/manage-knowledge/knowledge-model/knowledge-model.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    // Jira References - KNOV-933
    it('To verify the error message when both Name and Description fields are left blank. - [22344944]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Feb 2019 16:22:15 GMT

        StepLogger.caseId = 22344944;
        await StepLogger.preCondition('Navigate to Feedback Metadata Manager page');
        await AdminLoginPageHelper.loginAsAdmin();
        await AdminHomePageHelper.navigateToFeedbackMetadataManager();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories. OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`-Leave the Name field blank under English language header.
        -Leave the description field blank under English language header.
        -Scroll down and click on save.`);
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 5 is covered in step 4
        StepLogger.stepId(5);
        StepLogger.step('Click on Ok.');
        StepLogger.verification('The error message should be closed.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();
    });

    // Jira References - KNOV-930
    it('To verify the error message when Description field is left blank. - [22344898]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Feb 2019 16:22:15 GMT

        StepLogger.caseId = 22344898;
        await StepLogger.preCondition('Navigate to Feedback Metadata Manager page');
        await AdminLoginPageHelper.loginAsAdmin();
        await AdminHomePageHelper.navigateToFeedbackMetadataManager();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories. OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide the Name under English language header.
        Leave the description field blank under English language header.`);
        const name = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeName(name);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyName(name);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on Ok.');
        StepLogger.verification('The error message should be closed.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();
    });

    // Jira References - KNOV-926
    it('To access Feedback Metadata Manager screen. - [22344765]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Feb 2019 16:22:16 GMT

        StepLogger.caseId = 22344765;
        StepLogger.preCondition('Sigh in');
        await AdminLoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Click on the options icon (3 lines at the top left corner).');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification(`The following options should be displayed.
        -Home
        -Manage workbench
        -Manage communities
        -Manage Knowledge
        -Manage People
        -Settings
        -Logout`);
        await AdminHomePageHelper.verifySidebarFieldsDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Manage Knowledge.');
        await AdminHomePageHelper.clickOnManageKnowledgeMenu();
        StepLogger.verification(`Following 3 options should be displayed.
        -Knowledge Model
        -Knowledge Authoring
        -Knowledge Contribution`);
        await AdminHomePageHelper.verifyManageKnowledgeSubMenu();

        StepLogger.stepId(3);
        StepLogger.step('Click on knowledge model.');
        await AdminHomePageHelper.clickOnKnowledgeModelSubmenu();
        StepLogger.verification('List of options should be displayed.');
        await AdminHomePageHelper.verifyKnowledgeModelSubmenuOptions();

        StepLogger.stepId(4);
        StepLogger.step('Click on Feedback Metadata manager.');
        await AdminHomePageHelper.clickOnfeedbackMetadataManager();
        StepLogger.verification(`Feedback Metadata manager page should be displayed with Create and
        delete buttons at the top.`);
        await KnowledgeModelHelper.verifyFeedbackMetadataManagerDisplayed();
    });

    // Jira References - KNOV-927
    it('To create a New category. - [22344778]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344778;
        await StepLogger.preCondition('Navigate to Feedback Metadata Manager page');
        await AdminLoginPageHelper.loginAsAdmin();
        await AdminHomePageHelper.navigateToFeedbackMetadataManager();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide a name under English language header.
        Provide a description under English language header
        ( If multiple languages are configured for your Knova system, you may add Category Name and
        Description to the appropriate fields under the language header)`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification(`The created category should be displayed in the left pane. A message
        should be displayed at the to saying "Data saved successfully<date><time>"`);
        await KnowledgeModelHelper.verifyCategoryDisplayed(name);

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteCategory(name);
    });

    // Jira References - KNOV-931
    it('To verify the error message when an already existing name is provided in the Name field. - [22344910]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344910;
        await StepLogger.preCondition('Login and create a category');
        await AdminLoginPageHelper.loginAsAdmin();
        const categoryName = await KnowledgeModelHelper.createCategory();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide the Name which already exists under English language header.
        Provide the description under English language header.`);
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(categoryName, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(categoryName, description);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on Ok.');
        StepLogger.verification('The error message should be closed.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteCategory(categoryName);
    });

    // Jira References - KNOV-928
    it('To edit a category. - [22344801]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344801;
        StepLogger.preCondition('Log in and create a category');
        await AdminLoginPageHelper.loginAsAdmin();
        const category = await KnowledgeModelHelper.createCategory();

        StepLogger.stepId(1);
        StepLogger.step('Click on Categories.');
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on any category name from the left pane.');
        await KnowledgeModelHelper.clickOnACategory(category);
        StepLogger.verification(`The edit form of that category should be displayed
        with the previous details already filled in.`);
        await KnowledgeModelHelper.verifyCategoryDetailsFormDisplayed(category);

        StepLogger.stepId(3);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(4);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.neutral);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.neutral);

        StepLogger.stepId(5);
        StepLogger.step(`Update the Name field under English language header.
        Update the description field under English language header.`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(6);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification(`The edited category should be displayed in the left pane. A message
        should be displayed at the to saying "Data saved successfully<date><time>"`);
        await KnowledgeModelHelper.verifySelectedCategoryDisplayedInLeftPane(name);

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteSelectedCategory();
    });

    // Jira References - KNOV-935
    it('To verify the "No" button on the warning pop when the category hasn"t been saved. - [22344964]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 10:58:23 GMT

        StepLogger.caseId = 22344964;
        await StepLogger.preCondition('Login and create a category');
        await AdminLoginPageHelper.loginAsAdmin();
        const category = await KnowledgeModelHelper.createCategory();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
        Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
        -Positive
        -Neutral
        -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Provide a name under English language header.
        Provide a description under English language header
        ( If multiple languages are configured for your Knova system, you may add Category Name and
        Description to the appropriate fields under the language header)`);
        const name = RandomHelper.getRandomString();
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeNameAndDescription(name, description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyNameAndDescription(name, description);

        StepLogger.stepId(5);
        StepLogger.step(`-Don"t click on save.
        -Click on another category in the left pane.`);
        await KnowledgeModelHelper.clickOnACategory(category);
        StepLogger.verification('A confirmation message should pop up.');
        await CommonPageHelper.verifyConfirmatioMessageDisplayedAndClickNo();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on No');
        StepLogger.verification('The category should not get created.');
        await KnowledgeModelHelper.verifyCategoryNotDisplayed(name);

        StepLogger.postCondition('Clean up');
        await KnowledgeModelHelper.deleteCategory(category);
    });

    // Jira References - KNOV-929
    it('To verify the error message when Name field is left blank. - [22344867]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Feb 2019 14:35:11 GMT

        StepLogger.caseId = 22344867;
        await StepLogger.preCondition('Navigate to Feedback Metadata Manager page');
        await AdminLoginPageHelper.loginAsAdmin();
        await AdminHomePageHelper.navigateToFeedbackMetadataManager();

        StepLogger.stepId(1);
        StepLogger.step(`Click on Categories OR
    Click on Categories and right click on any category and select create.`);
        await KnowledgeModelHelper.clickOnCategories();
        StepLogger.verification('A form will be displayed to fill in to create a new category.');
        await KnowledgeModelHelper.verifyCategoryFormDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Classification drop down.');
        await KnowledgeModelHelper.clickOnClassificationDropdown();
        StepLogger.verification(`Following 3 options should be displayed.
    -Positive
    -Neutral
    -Negative`);
        await KnowledgeModelHelper.verifyClassificationOptionsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select an option.');
        await KnowledgeModelHelper.selectClassificationOption(KnowledgeModelConstant.classificationOptions.positive);
        StepLogger.verification('The selected option should be displayed in the classification field.');
        await KnowledgeModelHelper.verifySelectedClassificationOption(KnowledgeModelConstant.classificationOptions.positive);

        StepLogger.stepId(4);
        StepLogger.step(`Leave the Name field blank under English language header.
    Provide the description under English language header.`);
        const description = RandomHelper.getRandomString();
        await KnowledgeModelHelper.typeDescription(description);
        StepLogger.verification('The values should be displayed in the fields.');
        await KnowledgeModelHelper.verifyDescription(description);

        StepLogger.stepId(5);
        StepLogger.step('Scroll down and click on save.');
        await KnowledgeModelHelper.clickOnSaveButton();
        StepLogger.verification('An error message should be displayed.');
        await CommonPageHelper.verifyErrorMessageDisplayedAndClosePopup();

        // Step 6 is covered in step 5
        StepLogger.stepId(6);
        StepLogger.step('Click on Ok.');
        StepLogger.verification('The error message should be closed.');
        await KnowledgeModelHelper.verifyErrorMessageIsClosed();
    });
});
