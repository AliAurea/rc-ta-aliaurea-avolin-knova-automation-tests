import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { AdminLoginPageHelper } from '../../../../page-objects/pages/admin-login-page/admin-login.helper';
import { RssFeedManagerHelper } from '../../../../page-objects/pages/administer-system/rss-feed-manager/rss-feed-manager.helper';
import { RssFeedManagerPage } from '../../../../page-objects/pages/administer-system/rss-feed-manager/rss-feed-manager.po';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    // Jira References - KNOV-97
    it(`Validation of creating a RSS Feed by adding "Access Levels" along with the mandatory
        fields in the "RSS Feed Details" window - [22341779]`, async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 08:04:40 GMT

        StepLogger.caseId = 22341779;
        const feedName = PageHelper.getUniqueId();
        StepLogger.preCondition('Execute step 1 to 4 of C22336372 - Validation of admin user viewing the available ' +
            'fields and buttons in the RSS Feed Manager page of Knova Administrator application');
        await RssFeedManagerHelper.navigateToRssFeedManager();

        StepLogger.stepId(1);
        StepLogger.step('Click the "Create" button available on the top left side of the "RSS Feed Manager" page.');
        await RssFeedManagerPage.buttons.create.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" popup window should be displayed.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(2);
        StepLogger.step('In the "RSS Feed Details" window enter a valid name in the "Name:" field.');
        await RssFeedManagerPage.rssFeedDetail.name.sendKeys(feedName);
        StepLogger.verification('User should be able to enter a valid name in the "Name:" field.');
        await RssFeedManagerPage.rssFeedDetail.name.verifyTextEntered(feedName);

        StepLogger.stepId(3);
        StepLogger.step('Click the drop down option in the "URL Root:" field and select an option from the list of options displayed. (e.g, Knowledgecentral)');
        const selectedUrlRoot = await RssFeedManagerHelper.selectUrlRootOption();
        StepLogger.verification('User should be able to select an option in the "URL Root:" field.');
        await RssFeedManagerHelper.verifySelectedUrlRootOption(selectedUrlRoot);

        StepLogger.stepId(4);
        StepLogger.step('Click the drop down option in the "Language" field and select an option from the list of options displayed. (e.g, Greek)');
        const selectedLanguage = await RssFeedManagerHelper.selectLanguageOption();
        StepLogger.verification('User should be able to select an option in the "Language:" field.');
        await RssFeedManagerHelper.verifySelectedLanguageOption(selectedLanguage);

        StepLogger.stepId(5);
        StepLogger.step('Click the "Select" button available in the "Access Level" field.');
        await RssFeedManagerPage.rssFeedDetail.accessLevelsInput.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels" window should be displayed.');
        await RssFeedManagerHelper.verifyAccessLevelPopUp();

        StepLogger.stepId(6);
        StepLogger.step('Select the required access (e.g, newtest2) from the hierarchy displayed and click the "Add" button.');
        await RssFeedManagerHelper.switchToFrameAndSelectAccessLevelOption();
        StepLogger.verification('The selected access level should be displayed in the "Selected:" section' +
            ' in the same hierarchy structure from the main parent level.');
        await RssFeedManagerHelper.verifySelectedAccessLevelOption();

        StepLogger.stepId(7);
        StepLogger.step('Click the OK button.');
        await RssFeedManagerPage.buttons.oK.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels" window should be closed and all the levels displayed in ' +
            'the "Selected:" section of step 6 should be displayed under the "Select" button of the "Access levels" fields.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(8);
        StepLogger.step('Scroll down to the bottom of the page and click the "Submit" button.');
        await RssFeedManagerPage.buttons.submit.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" page should be closed and the user should be navigated to the "RSS Feed Manager" page.');
        await RssFeedManagerHelper.verifyNavigation();

        StepLogger.stepId(9);
        StepLogger.step('Verify if the newly added RSS feed is displayed with the values in the "Name", ' +
            '"Access Levels" and "Language" fields as entered/selected in step 2, 4 and 6.');
        StepLogger.verification('The newly added RSS feed should be displayed with values in the "Name:", "Access levels:" and "Language:" ' +
            'fields as entered in step 2, 4 and 6.');
        await RssFeedManagerHelper.verifyCreatedRssFeedByNameAndDelete(feedName);

        StepLogger.stepId(10);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('User should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-97
    it('Validating if the admin user can remove just a child access level after adding it in the "Select Access Levels" window - [22341849]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 08:04:40 GMT

        StepLogger.caseId = 22341849;
        StepLogger.preCondition('Execute step 1 to 6 of C22341779 - Validation of creating a RSS Feed by adding Access Levels ' +
            'along with the mandatory fields in the RSS Feed Details window');
        await RssFeedManagerHelper.navigateToRssFeedManager();
        const feedName = await RssFeedManagerHelper.selectAccessLevelForNewRssFeed();

        StepLogger.stepId(1);
        StepLogger.step('Select the bottom-most option in the "Selected:" section and click the "Remove" button.');
        await RssFeedManagerHelper.removeChildLevelAccessLevelOption();
        StepLogger.verification('The selected child access level should alone be removed from the list displayed ' +
            'in the "Selected:" section and the rest should be available in the "Selected:" section as before.');
        await RssFeedManagerHelper.verifyRemovedChildLevelAccessLevelOption();

        StepLogger.stepId(2);
        StepLogger.step('Click the OK button.');
        await RssFeedManagerPage.buttons.oK.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels" window should be closed and all the levels displayed in ' +
            'the "Selected:" section of step 1 should be displayed under the "Select" button of the "Access levels" fields.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(3);
        StepLogger.step('Scroll down to the bottom of the page and click the "Submit" button.');
        await RssFeedManagerPage.buttons.submit.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" page should be closed and the user should be navigated to the "RSS Feed Manager" page.');
        await RssFeedManagerHelper.verifyNavigation();

        StepLogger.stepId(4);
        StepLogger.step('Verify if the newly added RSS feed is displayed with the values in the "Name", "Access Levels" and "Language" ' +
            'fields as entered/selected.');
        StepLogger.verification('The newly added RSS feed should be displayed with values in the "Name:", "Access levels:" and "Language:" ' +
            'fields as entered/selected.');
        await RssFeedManagerHelper.verifyCreatedRssFeedByNameAndDelete(feedName);

        StepLogger.stepId(5);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('User should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-97
    it('Validating if the admin user can remove a parent access level after adding it in the "Select Access Levels" window - [22341877]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 08:04:40 GMT

        StepLogger.caseId = 22341877;
        StepLogger.preCondition('Execute step 1 to 6 of C22341779 - Validation of creating a RSS Feed by adding Access Levels ' +
            'along with the mandatory fields in the RSS Feed Details window');
        await RssFeedManagerHelper.navigateToRssFeedManager();
        const feedName = await RssFeedManagerHelper.selectAccessLevelForNewRssFeed();

        StepLogger.stepId(1);
        StepLogger.step('Select the second option from the bottom in the "Selected:" section and click the "Remove" button.');
        await RssFeedManagerHelper.removeParentLevelAccessLevelOption();
        StepLogger.verification('The selected access level along with the ones displayed below that should be removed ' +
            'from the list displayed in the "Selected:" section and the rest should be available in the "Selected:" section as before.');
        await RssFeedManagerHelper.verifyRemovedParentLevelAccessLevelOption();

        StepLogger.stepId(2);
        StepLogger.step('Click the OK button.');
        await RssFeedManagerPage.buttons.oK.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels" window should be closed and all the levels displayed in ' +
            'the "Selected:" section of step 1 should be displayed under the "Select" button of the "Access levels" fields.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(3);
        StepLogger.step('Scroll down to the bottom of the page and click the "Submit" button.');
        await RssFeedManagerPage.buttons.submit.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" page should be closed and the user should be navigated to the "RSS Feed Manager" page.');
        await RssFeedManagerHelper.verifyNavigation();

        StepLogger.stepId(4);
        StepLogger.step('Verify if the newly added RSS feed is displayed with the values in the "Name", "Access Levels" and "Language" ' +
            'fields as entered/selected.');
        StepLogger.verification('The newly added RSS feed should be displayed with values in the "Name:", "Access levels:" and "Language:" ' +
            'fields as entered/selected.');
        await RssFeedManagerHelper.verifyCreatedRssFeedByNameAndDelete(feedName);

        StepLogger.stepId(5);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('User should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-97
    it('Validation of the "Cancel" button in "Select Access Level" window - [22341883]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 08:04:40 GMT

        StepLogger.caseId = 22341883;
        StepLogger.preCondition('Execute step 1 to 4 of C22336372 - Validation of admin user viewing the available ' +
            'fields and buttons in the RSS Feed Manager page of Knova Administrator application');
        await RssFeedManagerHelper.navigateToRssFeedManager();

        StepLogger.stepId(1);
        StepLogger.step('Select the required access (e.g, newtest2) from the hierarchy displayed and click the "Add" button.');
        const feedName = await RssFeedManagerHelper.selectAccessLevelForNewRssFeed();
        StepLogger.verification('The selected access level should be displayed in the "Selected:" section in the same hierarchy ' +
            'structure starting from the main parent level.');
        await RssFeedManagerHelper.verifySelectedAccessLevelOption();

        StepLogger.stepId(2);
        StepLogger.step('Click the "Cancel" button.');
        await RssFeedManagerPage.buttons.cancel.hoverOverAndClick();
        StepLogger.verification('The "Select Access Level" window should be closed and the user should be navigated ' +
            'to the "RSS Feed Details" window without the selected access levels displayed under the "Select" button of the "Access Level:" field.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(3);
        StepLogger.step('Scroll down to the bottom of the page and click the "Submit" button.');
        await RssFeedManagerPage.buttons.submit.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" page should be closed and the user should be navigated to the "RSS Feed Manager" page.');
        await RssFeedManagerHelper.verifyNavigation();

        StepLogger.stepId(4);
        StepLogger.step('Verify if the newly added RSS feed is displayed with the values in the "Name", ' +
            '"Language" fields as entered/selected and not holding any value in the "Access Level" field.');
        StepLogger.verification('The newly added RSS feed should be displayed with the values in the "Name", ' +
            '"Language" fields as entered/selected and should not hold any value in the "Access Level" field.');
        await RssFeedManagerHelper.verifyCreatedRssFeedByNameAndDelete(feedName);

        StepLogger.stepId(5);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('User should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });

    // Jira References - KNOV-97
    it('Validating if the admin user is able to update the Access Level options in the "RSS Feed Details" popup window - [22378915]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Feb 2019 08:05:04 GMT

        StepLogger.caseId = 22378915;
        StepLogger.preCondition('Execute step 1 to 4 of C22336372 - Validation of admin user viewing the available ' +
            'fields and buttons in the RSS Feed Manager page of Knova Administrator application');
        await RssFeedManagerHelper.navigateToRssFeedManager();
        const feedName = await RssFeedManagerHelper.createNewRssFeed();

        StepLogger.stepId(1);
        StepLogger.step('Click on the feed name under the "Name" field of an existing RSS Feed with value(s) in the "Access Levels" field.');
        await RssFeedManagerHelper.clickRssFeed(feedName);
        StepLogger.verification('The "RSS Feed Details" popup window should be displayed with the existing values displayed in the respective fields.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(2);
        StepLogger.step('Click the "Select" button available in the "Access Levels" field.');
        await RssFeedManagerPage.rssFeedDetail.accessLevelsInput.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels"  window with the existing selected access levels displayed in the "Selected" ' +
            'section should be displayed.');
        await RssFeedManagerHelper.verifyAccessLevelPopUp();

        StepLogger.stepId(3);
        StepLogger.step('Select the required access (e.g, Level123) from the hierarchy displayed and click the "Add" button.');
        await RssFeedManagerHelper.switchToFrameAndSelectAccessLevelOption();
        StepLogger.verification(`The selected access level should be displayed in the "Selected:" '+
            'section in the same hierarchy structure from the main parent level.
                Note: Any level that is been added already will not be added again as a duplicate)`);
        await RssFeedManagerHelper.verifySelectedAccessLevelOption();

        StepLogger.stepId(4);
        StepLogger.step('Click the OK button.');
        await RssFeedManagerPage.buttons.oK.hoverOverAndClick();
        StepLogger.verification('The "Select Access Levels" window should be closed and all the levels displayed ' +
            'in the "Selected:" section of step 3 should be displayed under the "Select" button of the "Access levels" fields.');
        await RssFeedManagerHelper.verifyRssFeedDetailOption();

        StepLogger.stepId(5);
        StepLogger.step('Scroll down to the bottom of the page and click the "Submit" button.');
        await RssFeedManagerPage.buttons.submit.hoverOverAndClick();
        StepLogger.verification('The "RSS Feed Details" page should be closed and the user should be navigated to the "RSS Feed Manager" page.');
        await RssFeedManagerHelper.verifyNavigation();

        StepLogger.stepId(6);
        StepLogger.step('Verify if the updated record is displayed with the newly added access level along with the existing access level(s) ' +
            'in the "Access Levels" field.');
        StepLogger.verification(
            'The updated record should be displayed with the newly added access level along with the existing access level(s) in the "Access Levels" field.'
        );
        await RssFeedManagerHelper.verifyCreatedRssFeedByNameAndDelete(feedName);

        StepLogger.stepId(7);
        StepLogger.step('Click the burger icon from the top left corner of the page and select the "Logout" option.');
        await AdminLoginPageHelper.logout(true);
        StepLogger.verification('User should be logged out and the Knova Administrator application login page should be displayed.');
        await AdminLoginPageHelper.verifyUserNotLogged();
    });
});
