import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { Constants } from '../../../components/misc-utils/constants';
import { AdminHomePageHelper } from '../../../page-objects/pages/admin-home-page/admin-home.helper';
import { AdminHomePage } from '../../../page-objects/pages/admin-home-page/admin-home.po';
import { AdminLoginPageHelper } from '../../../page-objects/pages/admin-login-page/admin-login.helper';
import { WorkflowBuilderHelper } from '../../../page-objects/pages/manage-knowledge/knowledge-authoring/workflow-buider.helper';
import { WorkflowBuilderConstant } from '../../../page-objects/pages/manage-knowledge/knowledge-authoring/workflow-builder.constants';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: AdminLoginPageHelper;
    const ruleName = `${WorkflowBuilderConstant.labels.test}${PageHelper.getUniqueId()}`;
    const ruleName2 = `${WorkflowBuilderConstant.labels.test}${PageHelper.getUniqueId()}`;

    beforeAll(async () => {
        loginPageHelper = AdminLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.logout();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
        await AdminLoginPageHelper.loginAsAdmin();
    });

    // Jira References - KNOV-1058
    it('Verify Workflow Builder menu option is available - [22336393]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:24 GMT
        StepLogger.caseId = 22336393;

        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon.');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The menu list should be opened.');
        await AdminHomePageHelper.verifySidebarFieldsDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Manage Knowledge.');
        await AdminHomePageHelper.clickOnManageKnowledgeMenu();
        StepLogger.verification('The sub menu list should be opened.');
        await AdminHomePageHelper.verifyManageKnowledgeSubMenu();

        StepLogger.stepId(3);
        StepLogger.step('Click on Knowledge Authoring.');
        await AdminHomePageHelper.clickOnKnowledgeAuthoring();
        StepLogger.verification('The sub  menu list should be displayed.');
        await AdminHomePageHelper.verifyKnowledgeAuthoringSubmenuOptions();

        // Step 4 has been covered in step 3
        StepLogger.stepId(4);
        StepLogger.step('Verify that the option WorkFlow Builder should be available.');
        StepLogger.verification('The option Workflow Builder should be available.');

        StepLogger.postCondition('Logout');
        await AdminHomePageHelper.clickOnBurgerIcon();
        await AdminLoginPageHelper.logout(true);
    });

    // Jira References - KNOV-1059
    it('Verify Open Workflow Builder page - [22336394]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22336394;

        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon.');
        await AdminHomePageHelper.clickOnBurgerIcon();
        StepLogger.verification('The menu list should be opened.');
        await AdminHomePageHelper.verifySidebarFieldsDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on Manage Knowledge-->Knowledge Authoring.');
        await WorkflowBuilderHelper.goToKnowledgeAuthoring();
        StepLogger.verification('The sub menu list should be displayed.');
        await AdminHomePageHelper.verifyKnowledgeAuthoringSubmenuOptions();

        StepLogger.stepId(3);
        StepLogger.step('Click on Workflow Builder');
        await AdminHomePageHelper.clickSubMenu(AdminHomePage.knowledgeAuthoring.workflowBuilder);
        StepLogger.verification('Authoring Workflow Builder page should be opened.');
        await WorkflowBuilderHelper.verifyPageTitle();

        StepLogger.postCondition('Logout');
        await AdminLoginPageHelper.logout(true);
    });

    // Jira References - KNOV-1060
    it('Verify Click on New Rule Button - [22336408]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:24 GMT
        StepLogger.caseId = 22336408;

        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon -->Manage Knowledge-->Knowledge Authoring.');
        await WorkflowBuilderHelper.navigateToKnowledgeAuthoring();
        StepLogger.verification('The sub menu list should be displayed.');
        await AdminHomePageHelper.verifyKnowledgeAuthoringSubmenuOptions();

        StepLogger.stepId(2);
        StepLogger.step('Click on Workflow Builder');
        await AdminHomePageHelper.clickSubMenu(AdminHomePage.knowledgeAuthoring.workflowBuilder);
        StepLogger.verification('Authoring Workflow Builder page should be opened.');
        await WorkflowBuilderHelper.verifyPageTitle();

        StepLogger.stepId(3);
        StepLogger.step('Click on New Rule Button.');
        await WorkflowBuilderHelper.clickNewRuleButton();
        StepLogger.verification('Fields for the new rule should be displayed.');
        await WorkflowBuilderHelper.verifyNewRuleFields();

        StepLogger.postCondition('Cancel and logout');
        await WorkflowBuilderHelper.cancelAndLogout();
    });

    // Jira References - KNOV-1061
    it('Verify Click on Edit for a Rule - [22336409]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22336409;

        StepLogger.preCondition('Create new rule');
        await WorkflowBuilderHelper.createNewRule(ruleName);

        // Step 1 has been covered in preCondition
        StepLogger.stepId(1);
        StepLogger.step('Click on the Menu icon -->Manage Knowledge-->Knowledge Authoring.');
        StepLogger.verification('The sub menu list should be displayed.');

        // Step 2 has been covered in preCondition
        StepLogger.stepId(2);
        StepLogger.step('Click on Workflow Builder');
        StepLogger.verification('Authoring Workflow Builder page should be opened.');

        // Step 3 has been covered in preCondition
        StepLogger.stepId(3);
        StepLogger.step('Click on Workflow state name from the list.');
        StepLogger.verification('The selected State information should be displayed.');

        StepLogger.stepId(4);
        StepLogger.step('Click on the Edit for any rule.');
        await WorkflowBuilderHelper.clickEditButton();
        StepLogger.verification('Fields for the rule should be displayed.');
        await WorkflowBuilderHelper.verifyNewRuleFields();

        StepLogger.postCondition('Delete rule and logout');
        await WorkflowBuilderHelper.deleteRuleAndLogout();
    });

    // Jira References - KNOV-1062
    it('Verify Set Name for a rule - [22336492]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22336492;
        const spacesName = `${ruleName} ${WorkflowBuilderConstant.labels.test}`;
        const numbersName = `${ruleName} ${Constants.number.two}`;
        const specialName = `${ruleName} ${Constants.specialCharacters.at}`;

        StepLogger.preCondition('Create new rule');
        await WorkflowBuilderHelper.createNewRule(ruleName);

        StepLogger.stepId(1);
        StepLogger.step(`Display Rule fields using [C22336409]/[C22336408].
            Set a rule name with spaces. Click Save Changes.
            e.g. Test Rule`);
        await WorkflowBuilderHelper.enterNameAndSave(spacesName);
        StepLogger.verification('The rule should be saved successfully.');
        await WorkflowBuilderHelper.verifySavedName(spacesName);

        StepLogger.stepId(2);
        StepLogger.step(`Display Rule fields using [C22336409]/[C22336408].
            Set a rule name with numbers. Click Save Changes.
            e.g. Test Rule 2`);
        await WorkflowBuilderHelper.enterNameAndSave(numbersName);
        StepLogger.verification('The rule should be saved successfully.');
        await WorkflowBuilderHelper.verifySavedName(numbersName);

        StepLogger.stepId(3);
        StepLogger.step(`Display Rule fields using [C22336409]/[C22336408].
            Set a rule name with special Characters. Click Save Changes.
            e.g. Test Rule @2`);
        await WorkflowBuilderHelper.enterNameAndSave(specialName);
        StepLogger.verification('The rule should be saved successfully.');
        await WorkflowBuilderHelper.verifySavedName(specialName);

        StepLogger.stepId(4);
        StepLogger.step(`Display Rule fields using [C22336409]/[C22336408].
            Enter a rule name which already exists.`);
        await WorkflowBuilderHelper.clickNewRuleButton();
        await WorkflowBuilderHelper.enterNameAndSave(specialName, false);
        StepLogger.verification('A message should be popped up, displaying that rule name is not unique.');
        await WorkflowBuilderHelper.verifyNotUniqueNameWindow();

        StepLogger.postCondition('Cancel changes, delete rule and logout');
        await WorkflowBuilderHelper.cancelChanges();
        await WorkflowBuilderHelper.deleteRuleAndLogout();
    });

    // Jira References - KNOV-1063
    it('Verify Create New Rule - [22336583]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22336583;

        StepLogger.preCondition('Navigate to Workflow Builder');
        await WorkflowBuilderHelper.navigateToWorkflowBuilder();

        StepLogger.stepId(1);
        StepLogger.step('Click on the new Rule button.');
        await WorkflowBuilderHelper.clickNewRuleButton();
        StepLogger.verification('Fields for the new rule should be displayed.');
        await WorkflowBuilderHelper.verifyNewRuleFields();

        StepLogger.stepId(2);
        StepLogger.step('Set Name,');
        await WorkflowBuilderHelper.enterName(ruleName);
        StepLogger.verification('User should be able to set unique name and contain letters, numbers, and spaces; special characters are allowed.');
        await WorkflowBuilderHelper.verifyName(ruleName);

        StepLogger.stepId(3);
        StepLogger.step(`Select attributes for the various columns. If any of the columns are not relevant for the rule,
            select the blank option on the drop-down list.
            In some cases, you may need to click Select to access the list of values; you can then browse or search for the value to apply to the rule.`);
        await WorkflowBuilderHelper.selectEventOption(WorkflowBuilderConstant.event.otherChange);
        StepLogger.verification('User should be able to set various attribute values.');
        await WorkflowBuilderHelper.verifySelectedEvent(WorkflowBuilderConstant.event.otherChange);

        StepLogger.stepId(4);
        StepLogger.step('From the Next State list, select the state to which the document should move after the current state.');
        await WorkflowBuilderHelper.selectNextStateOption(WorkflowBuilderConstant.nextState.author);
        StepLogger.verification('User should be able to set next State.');
        await WorkflowBuilderHelper.verifySelectedNextState(WorkflowBuilderConstant.nextState.author);

        StepLogger.stepId(5);
        StepLogger.step('Click Save Changes.');
        await WorkflowBuilderHelper.clickSaveChangesButton();
        StepLogger.verification('The page should be refreshed and the rules should be created.');
        await WorkflowBuilderHelper.verifyCreatedRule(ruleName);

        StepLogger.postCondition('Delete rule and logout');
        await WorkflowBuilderHelper.deleteRuleAndLogout();
    });

    // Jira References - KNOV-1064
    it('Verify Edit a Rule - [22336606]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22336606;

        StepLogger.preCondition('Create new rule');
        await WorkflowBuilderHelper.createNewRule(ruleName);

        StepLogger.stepId(1);
        StepLogger.step('Click on the Edit for any rule.');
        await WorkflowBuilderHelper.clickEditButton();
        StepLogger.verification('Fields for the rule should be displayed.');
        await WorkflowBuilderHelper.verifyNewRuleFields();

        StepLogger.stepId(2);
        StepLogger.step('Set Name,');
        await WorkflowBuilderHelper.enterName(ruleName);
        StepLogger.verification('User should be able to set unique name and contain letters, numbers, and spaces; special characters are allowed.');
        await WorkflowBuilderHelper.verifyName(ruleName);

        StepLogger.stepId(3);
        StepLogger.step(`Select attributes for the various columns. If any of the columns are not relevant for the rule,
            select the blank option on the drop-down list.
            In some cases, you may need to click Select to access the list of values; you can then browse or search for the value to apply to the rule.`);
        await WorkflowBuilderHelper.selectEventOption(WorkflowBuilderConstant.event.otherChange);
        StepLogger.verification('User should be able to set various attribute values.');
        await WorkflowBuilderHelper.verifySelectedEvent(WorkflowBuilderConstant.event.otherChange);

        StepLogger.stepId(4);
        StepLogger.step('From the Next State list, select the state to which the document should move after the current state.');
        await WorkflowBuilderHelper.selectNextStateOption(WorkflowBuilderConstant.nextState.archiveReview);
        StepLogger.verification('User should be able to set next State.');
        await WorkflowBuilderHelper.verifySelectedNextState(WorkflowBuilderConstant.nextState.archiveReview);

        StepLogger.stepId(5);
        StepLogger.step('Click Save Changes.');
        await WorkflowBuilderHelper.clickSaveChangesButton();
        StepLogger.verification('The page should be refreshed and the rules should be created.');
        await WorkflowBuilderHelper.verifyCreatedRule(ruleName);

        StepLogger.postCondition('Delete rule and logout');
        await WorkflowBuilderHelper.deleteRuleAndLogout();
    });

    // Jira References - KNOV-1065
    it('Verify Click Reorder when are less than 2 rules - [22341300]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22341300;

        StepLogger.preCondition('Navigate to Workflow Builder');
        await WorkflowBuilderHelper.navigateToWorkflowBuilder();

        StepLogger.stepId(1);
        StepLogger.step('Click on Workflow state name from the list which has less than 2 rules.');
        await WorkflowBuilderHelper.selectSuggestionWorkflowState();
        StepLogger.verification('The State information should be displayed.');
        await WorkflowBuilderHelper.verifySelectedWorkflowState(WorkflowBuilderConstant.workflowStates.suggestion);

        StepLogger.stepId(2);
        StepLogger.step('Click on Reorder Button.');
        await WorkflowBuilderHelper.clickReorderButton();
        StepLogger.verification('A message should be popped up, informing that atleast 2 rules are required to reorder rules.');
        await WorkflowBuilderHelper.verifyAtLeastTwoRulesWindow();

        StepLogger.stepId(3);
        StepLogger.step('Click OK.');
        await WorkflowBuilderHelper.clickOkButton();
        StepLogger.verification('The pop up should be dismissed.');
        await WorkflowBuilderHelper.verifyErrorWindowClosed();

        StepLogger.postCondition('Logout');
        await AdminLoginPageHelper.logout(true);
    });

    // Jira References - KNOV-1066
    it('Verify Click Reorder when 2 or more rules are available - [22341398]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22341398;

        StepLogger.preCondition('Create two new rules');
        await WorkflowBuilderHelper.createNewRule(ruleName);
        await WorkflowBuilderHelper.createNewRule(ruleName2, false);

        // Step 1 has been covered in preCondition
        StepLogger.stepId(1);
        StepLogger.step('Click on Workflow state name from the list which has 2 or more rules.');
        StepLogger.verification('The State information should be displayed.');

        StepLogger.stepId(2);
        StepLogger.step('Click on Reorder Button.');
        await WorkflowBuilderHelper.clickReorderButton();
        StepLogger.verification('Reorder rules window should be displayed.');
        await WorkflowBuilderHelper.verifyReorderModalDisplayed(true);

        StepLogger.stepId(3);
        StepLogger.step('Click OK.');
        await WorkflowBuilderHelper.clickReorderOkButton();
        StepLogger.verification('The Reorder rules window should be dismissed.');
        await WorkflowBuilderHelper.verifyErrorWindowClosed();

        StepLogger.postCondition('Delete rules and logout');
        await WorkflowBuilderHelper.deleteRulesAndLogout();
    });

    // Jira References - KNOV-1067
    it('Verify Cancel in Reorder Rules window - [22341431]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:25 GMT
        StepLogger.caseId = 22341431;

        StepLogger.preCondition('Create two new rules');
        await WorkflowBuilderHelper.createNewRule(ruleName);
        await WorkflowBuilderHelper.createNewRule(ruleName2, false);

        // Step 1 has been covered in preCondition
        StepLogger.stepId(1);
        StepLogger.step('Click on Workflow state name from the list which has 2 or more rules.');
        StepLogger.verification('The State information should be displayed.');

        StepLogger.stepId(2);
        StepLogger.step('Click on Reorder Button.');
        await WorkflowBuilderHelper.clickReorderButton();
        StepLogger.verification('Reorder rules window should be displayed.');
        await WorkflowBuilderHelper.verifyReorderModalDisplayed(true);

        StepLogger.stepId(3);
        StepLogger.step(`Select Any rule.
            Click Move Up/Down.`);
        const initialOrder = await WorkflowBuilderHelper.moveRule(ruleName);
        StepLogger.verification('The rule should be moved up/down as selected.');
        await WorkflowBuilderHelper.verifyItemsReorderedOnReorderModal(initialOrder);

        StepLogger.stepId(4);
        StepLogger.step('Click Cancel.');
        await WorkflowBuilderHelper.clickReorderCancelButton();
        StepLogger.verification(`The Reorder rules window should be dismissed.
            The order of rules should not be changed.`);
        await WorkflowBuilderHelper.verifyRulesNotReordered(initialOrder, true);

        StepLogger.postCondition('Delete rules and logout');
        await WorkflowBuilderHelper.deleteRulesAndLogout();
    });

    // Jira References - KNOV-1068
    it('Verify Reorder of Workflow Rules - [22341465]', async () => {
        // Auto generated by aurea-automation - util on Wed, 27 Feb 2019 07:38:24 GMT
        StepLogger.caseId = 22341465;

        StepLogger.preCondition('Create two new rules');
        await WorkflowBuilderHelper.createNewRule(ruleName);
        await WorkflowBuilderHelper.createNewRule(ruleName2, false);

        // Step 1 has been covered in preCondition
        StepLogger.stepId(1);
        StepLogger.step('Click on Workflow state name from the list which has 2 or more rules.');
        StepLogger.verification('The State information should be displayed.');

        StepLogger.stepId(2);
        StepLogger.step('Click on Reorder Button.');
        await WorkflowBuilderHelper.clickReorderButton();
        StepLogger.verification('Reorder rules window should be displayed.');
        await WorkflowBuilderHelper.verifyReorderModalDisplayed(true);

        StepLogger.stepId(3);
        StepLogger.step(`Select Any rule.
            Click Move Up.`);
        let initialOrder = await WorkflowBuilderHelper.moveRule(ruleName);
        StepLogger.verification('The rule should be moved up as selected.');
        await WorkflowBuilderHelper.verifyItemsReorderedOnReorderModal(initialOrder);

        StepLogger.stepId(4);
        StepLogger.step(`Select Any rule.
            Click Move Down.`);
        initialOrder = await WorkflowBuilderHelper.moveRule(ruleName, false);
        StepLogger.verification('The rule should be moved down as selected.');
        await WorkflowBuilderHelper.verifyItemsReorderedOnReorderModal(initialOrder);

        StepLogger.stepId(5);
        StepLogger.step('Perform Steps 3 and/or 4 until the order of rules is achieved as desired.');
        initialOrder = await WorkflowBuilderHelper.moveRule(ruleName);
        StepLogger.verification('The rules should be ordered as desired.');
        await WorkflowBuilderHelper.verifyItemsReorderedOnReorderModal(initialOrder);

        StepLogger.stepId(6);
        StepLogger.step('Click Ok.');
        await WorkflowBuilderHelper.clickReorderOkButton();
        StepLogger.verification(`The Reorder rules window should be dismissed.
            The order of rules should be changed as specified in the Reorder rules window.`);
        await WorkflowBuilderHelper.verifyRulesReordered(initialOrder, true);

        StepLogger.postCondition('Delete rules and logout');
        await WorkflowBuilderHelper.deleteRulesAndLogout();
    });
});
