import { PageHelper } from '../../../components/html/page-helper';

import { StepLogger } from '../../../../core/logger/step-logger';
import { CredentialsHelper } from '../../../components/misc-utils/credentials-helper';
import { EndpointHelper } from '../../../components/misc-utils/endpoint-helper';
import { RandomHelper } from '../../../components/misc-utils/random-helper';
import { SelfServiceHomePageHelper } from '../../../page-objects/pages/self-service/self-service-home-page.helper';
import { SelfServiceLoginPageConstant } from '../../../page-objects/pages/self-service/self-service-login.constant';
import { SelfServiceLoginPageHelper } from '../../../page-objects/pages/self-service/self-service-login.helper';
import { SelftServiceLoginPage } from '../../../page-objects/pages/self-service/self-service-login.po';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.smokeSuite, () => {
    let loginPageHelper: SelfServiceLoginPageHelper;
    const admin = CredentialsHelper.admin;

    beforeAll(async () => {
        loginPageHelper = SelfServiceLoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
        await loginPageHelper.goTo();
    });

    beforeEach(async () => {
        await PageHelper.switchToFirstTab();
        await loginPageHelper.goTo();
    });

    // Jira References - KNOV-433
    it('Verify if the user is already registered . - [22431487]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 21:28:22 GMT
        StepLogger.caseId = 22431487;

        StepLogger.stepId(1);
        StepLogger.step(`Click on the link.
        ${EndpointHelper.selfservice}`);
        StepLogger.verification('The log in page of the application is displayed.');
        await SelfServiceLoginPageHelper.navigateToLoginPage();

        StepLogger.stepId(2);
        StepLogger.step('Enter the username.(admin)');
        StepLogger.verification('The user is able to enter the username.');
        await SelfServiceLoginPageHelper.enterAndVerifyAdminUserName(admin.username);

        StepLogger.stepId(3);
        StepLogger.step('Enter the password.(admin)');
        StepLogger.verification('The user is able to enter the password.');
        await SelfServiceLoginPageHelper.enterAndVerifyAdminPassword(admin.password);

        StepLogger.stepId(4);
        StepLogger.step('Click on the checkbox for remember my login.');
        StepLogger.verification('the check box is ticked.');
        await SelfServiceLoginPageHelper.checkAndVerifySaveLogin();

        StepLogger.stepId(5);
        StepLogger.step('Click on login button.');
        StepLogger.verification('Knova self service page is displayed.');
        await SelfServiceLoginPageHelper.clickLoginButton();

        StepLogger.postCondition('Log out');
        await SelfServiceLoginPageHelper.logout();
    });

    // Jira References - KNOV-433
    it('Verify by clicking on reset button all the fields are reset. - [22431515]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 21:38:08 GMT
        StepLogger.caseId = 22431515;

        StepLogger.stepId(1);
        StepLogger.step(`Click on the link.
        ${EndpointHelper.selfservice}`);
        StepLogger.verification('The log in page of the application is displayed.');
        await SelfServiceLoginPageHelper.navigateToLoginPage();

        StepLogger.stepId(2);
        StepLogger.step('Enter the username.(admin)');
        StepLogger.verification('The user is able to enter the username.');
        await SelfServiceLoginPageHelper.enterAndVerifyAdminUserName(admin.username);

        StepLogger.stepId(3);
        StepLogger.step('Enter the password.(admin)');
        StepLogger.verification('The user is able to enter the password.');
        await SelfServiceLoginPageHelper.enterAndVerifyAdminPassword(admin.password);

        StepLogger.stepId(4);
        StepLogger.step('Click on reset button.');
        StepLogger.verification('The fields are refreshed.');
        await SelfServiceLoginPageHelper.clickAndVerifyResetButton();
    });

    // Jira References - KNOV-433
    it('Verify if user is able to register. - [22431517]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 21:38:52 GMT
        const data = SelfServiceLoginPageConstant.testData;
        const email = RandomHelper.getRandomEmail();
        StepLogger.caseId = 22431517;

        StepLogger.stepId(1);
        StepLogger.step(`Click on the link.
        ${EndpointHelper.selfservice}`);
        StepLogger.verification('The log in page of the application is displayed.');
        await SelfServiceLoginPageHelper.navigateToLoginPage();

        StepLogger.stepId(2);
        StepLogger.step('Click on register now under Join our service community.');
        StepLogger.verification('It will display the customer microsite page.');
        await SelfServiceLoginPageHelper.clickAndVerifyRegisterNowLink();

        StepLogger.stepId(3);
        StepLogger.step('Enter user name.');
        StepLogger.verification('User is able to enter the user name.');
        await SelfServiceLoginPageHelper.enterAndVerifyUserName(data.userNameTxt);

        StepLogger.stepId(4);
        StepLogger.step('Enter the password.');
        StepLogger.verification('User is able to enter the password.');
        await SelfServiceLoginPageHelper.enterAndVerifyPassword(data.passwordTxt);

        StepLogger.stepId(5);
        StepLogger.step('Enter the same password under confirm password field.');
        StepLogger.verification('User enters the confirm password.');
        await SelfServiceLoginPageHelper.enterAndVerifyConfirmPassword(data.passwordTxt);

        StepLogger.stepId(6);
        StepLogger.step('Enter the first name.');
        StepLogger.verification('User enters the first name.');
        await SelfServiceLoginPageHelper.enterAndVerifyFirstName(data.firstNameTxt);

        StepLogger.stepId(7);
        StepLogger.step('Enter the last name.');
        StepLogger.verification('user enters the last name.');
        await SelfServiceLoginPageHelper.enterAndVerifyLastName(data.lastNameTxt);

        StepLogger.stepId(8);
        StepLogger.step('Enter the email id.');
        StepLogger.verification('User enters the email address.');
        await SelfServiceLoginPageHelper.enterAndVerifyEmail(email);
    });

    // Jira References - KNOV-433
    it('Verify after clicking on submit the user is  logged in to Knova Self-Service. - [22431518]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 21:39:58 GMT
        const data = SelfServiceLoginPageConstant.testData;
        const username = PageHelper.getUniqueId();
        const email = RandomHelper.getRandomEmail();
        StepLogger.caseId = 22431518;

        StepLogger.preCondition('Run the TC C22431517.');
        await SelfServiceLoginPageHelper.fillRegistrationForm(username,
            data.passwordTxt,
            data.firstNameTxt,
            data.lastNameTxt,
            email
        );

        StepLogger.stepId(1);
        StepLogger.step('Click on submit.');
        StepLogger.verification(`Previously the user is was user1
        After changing the user id and clicking on submit button
        Success message is displayed.`);
        await SelfServiceLoginPageHelper.clickAndVerifySubmitSuccess();

        StepLogger.stepId(2);
        StepLogger.step('Click on Customer microsite tab.');
        await SelftServiceLoginPage.loginForm.cutomerMicrosite.clickButton();
        StepLogger.verification('The user is logged in.');
        await SelfServiceHomePageHelper.verifyWelcomeLabelDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click on log out at the right hand side.');
        await SelfServiceLoginPageHelper.logout();
        StepLogger.verification('The user is logged out of the application.');
        await SelftServiceLoginPage.loginForm.selfServiceLogin.verifyDisplayedStatus();
    });

    // Jira References - KNOV-433
    it('Verify if user forgot the password the temporary password is send to the mail id registered. - [22431521]', async () => {
        // Auto generated by aurea-automation - util on Wed, 13 Mar 2019 21:40:46 GMT
        const username = PageHelper.getUniqueId();
        const email = RandomHelper.getRandomEmail();
        StepLogger.caseId = 22431521;

        StepLogger.preCondition('Register new user');
        await SelfServiceLoginPageHelper.registerNewUser(username, email);

        // step 1 is covered in the precondition block
        StepLogger.stepId(1);
        StepLogger.step(`Hit the url of the application.
        ${EndpointHelper.selfservice}`);
        StepLogger.verification('The log in page of the user is displayed.');

        StepLogger.stepId(2);
        StepLogger.step('Click on the link Forgot your password or username.');
        StepLogger.verification('Forgot password is displayed.');
        await SelfServiceLoginPageHelper.clickAndVerifyForgotPassword();

        StepLogger.stepId(3);
        StepLogger.step('Enter the email address.');
        StepLogger.verification('User is able to enter the email address .');
        await SelfServiceLoginPageHelper.enterAndVerifyEmail(email);

        StepLogger.stepId(4);
        StepLogger.step('Click on submit.');
        await SelftServiceLoginPage.customerMicrositeForm.submitBtn.clickButton();
        StepLogger.verification('â€¢Temporary password is sent to your E-mail address. is displayed.');
        await SelftServiceLoginPage.loginForm.temporaryPassword.verifyDisplayedStatus();
    });

       // Jira References - KNOV-433
    it('Verify if log out is clicked then user is re directed to the log in page. - [22431525]', async () => {
        // Auto generated by aurea-automation - util on Thu, 14 Mar 2019 16:57:52 GMT
        const username = PageHelper.getUniqueId();
        const email = RandomHelper.getRandomEmail();
        StepLogger.caseId = 22431525;

        StepLogger.preCondition('Run the TC C22431487.');
        await SelfServiceLoginPageHelper.registerNewUserNoLogout(username, email);

        StepLogger.stepId(1);
        StepLogger.step('Verify the log out hyperlink is present on the RHS.');
        StepLogger.verification('The log out option is present on RHS.');
        await SelftServiceLoginPage.loginForm.logoutLink.verifyDisplayedStatus();

        StepLogger.stepId(2);
        StepLogger.step('Click on log out present at the right most corner of the screen.');
        await SelfServiceLoginPageHelper.logout();
        StepLogger.verification('the user logs out of the application.');
        await SelfServiceHomePageHelper.verifyLogoutLinkNotDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('verify the log in page is displayed.');
        StepLogger.verification('The log in page is displayed.');
        await SelftServiceLoginPage.loginForm.selfServiceLogin.verifyDisplayedStatus();
    });
});
